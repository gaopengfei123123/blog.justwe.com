<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>helloword啊</title>
    <link>https://blog.justwe.site/</link>
    <description>Recent content on helloword啊</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&lt;a rel=&#39;icp&#39; href=&#39;https://beian.miit.gov.cn/&#39; target=&#39;_blank&#39;&gt;justwe.site 版权所有 ICP证:京ICP备16053557号&lt;/a&gt;</copyright>
    <lastBuildDate>Fri, 19 Sep 2025 10:17:01 +0800</lastBuildDate><atom:link href="https://blog.justwe.site/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>关于我</title>
      <link>https://blog.justwe.site/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>https://blog.justwe.site/about/</guid>
      <description>会点 php,会点 js,会点 go,还有一些乱七八糟的东西 目前学的比较杂乱,需要整理一番,慢慢来吧.. 如果加微信, 麻烦标明 justwe 来的, 不然一律当做卖</description>
    </item>
    
    <item>
      <title>golang 的序列化中选 json 还是 gob?</title>
      <link>https://blog.justwe.site/post/json-or-gob/</link>
      <pubDate>Fri, 19 Sep 2025 10:17:01 +0800</pubDate>
      
      <guid>https://blog.justwe.site/post/json-or-gob/</guid>
      <description>&lt;p&gt;为什么 gob 序列化后的内容比 json序列化的还要大, 中间多了什么?&lt;/p&gt;
&lt;p&gt;以下内容由 ai 生成并产生分析结果&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Buf 迁移老项目时遇到的问题</title>
      <link>https://blog.justwe.site/post/buf-migrate/</link>
      <pubDate>Fri, 10 Jan 2025 16:27:37 +0800</pubDate>
      
      <guid>https://blog.justwe.site/post/buf-migrate/</guid>
      <description>&lt;p&gt;最近接手了一个19年的老项目, 项目里的 protobuf 版本老而且编译是基于本地环境, 多人开发时就因为各自的&lt;code&gt;protoc&lt;/code&gt;版本不同,
导致生成的文件也是乱七八糟的, 所以决定使用 &lt;code&gt;buf&lt;/code&gt; 来迁移项目, 但是遇到了一些问题, 记录一下&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>validator.proto Error</title>
      <link>https://blog.justwe.site/post/proto-validator-error/</link>
      <pubDate>Fri, 02 Aug 2024 18:24:14 +0800</pubDate>
      
      <guid>https://blog.justwe.site/post/proto-validator-error/</guid>
      <description>&lt;p&gt;生成 protobuf 文件时报错:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;github.com/mwitkow/go-proto-validators/validator.proto: File not found.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Import &lt;span class=&#34;s2&#34;&gt;&amp;#34;github.com/mwitkow/go-proto-validators/validator.proto&amp;#34;&lt;/span&gt; was not found or had errors.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>git拉取私有库时的异常</title>
      <link>https://blog.justwe.site/post/git-url-fatal/</link>
      <pubDate>Tue, 23 Jul 2024 17:55:00 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/git-url-fatal/</guid>
      <description>更新一个新的项目时报的错误: 1 2 3 fatal: could not read Username for &amp;#39;https://git.xxx.com&amp;#39;: terminal prompts disabled Confirm the import path was entered correctly. If this is a private repository, see https://golang.org/doc/faq#git_https for additional information. 造成错误的原因是这是让 golang 拉取一个私有库里的 package, 因为用</description>
    </item>
    
    <item>
      <title>.env一个不易发掘的坑</title>
      <link>https://blog.justwe.site/post/other-env-bug/</link>
      <pubDate>Tue, 25 Jun 2024 19:21:36 +0800</pubDate>
      
      <guid>https://blog.justwe.site/post/other-env-bug/</guid>
      <description>&lt;p&gt;最近开发的时候有一个不易察觉到的问题, 有关 &lt;code&gt;.env&lt;/code&gt; 的&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>数字和 ABC 互相转换</title>
      <link>https://blog.justwe.site/post/php-int-to-abc/</link>
      <pubDate>Thu, 21 Dec 2023 18:50:52 +0800</pubDate>
      
      <guid>https://blog.justwe.site/post/php-int-to-abc/</guid>
      <description>&lt;p&gt;生成excel 数据的时候, 需要计算数据的列, 例如 1 -&amp;gt; A , 2-&amp;gt;B, 27 -&amp;gt; AA, 现在做一个简单的小工具实现&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>关于 elasticsearch 一些不错的文章</title>
      <link>https://blog.justwe.site/post/es-tips/</link>
      <pubDate>Wed, 09 Nov 2022 10:32:03 +0800</pubDate>
      
      <guid>https://blog.justwe.site/post/es-tips/</guid>
      <description>&lt;p&gt;开发中常用到的知识点文章收集, 注意有一些字段可以直接跳转到文章上哦&lt;/p&gt;
&lt;p&gt;格式有点乱, 随手记一下, 哪天用到了再翻&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>go mysql canal demo测试</title>
      <link>https://blog.justwe.site/post/go-mysql-canal/</link>
      <pubDate>Thu, 20 Oct 2022 15:55:55 +0800</pubDate>
      
      <guid>https://blog.justwe.site/post/go-mysql-canal/</guid>
      <description>&lt;p&gt;这里记录一下使用 &lt;code&gt;go-mysql&lt;/code&gt; 里的示例时遇到的问题&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python Selenium 爬虫初体验</title>
      <link>https://blog.justwe.site/post/python-selenium/</link>
      <pubDate>Thu, 24 Feb 2022 10:43:26 +0800</pubDate>
      
      <guid>https://blog.justwe.site/post/python-selenium/</guid>
      <description>最近有个作业有用到爬虫的需求, 于是乎就了解了一下这方面的玩意. 前言 最开始的时候, 我用的是 scrapy 这个爬虫框架, 不过对于简单需求来说, 没必要这么兴师</description>
    </item>
    
    <item>
      <title>简单图解一致性哈希实现</title>
      <link>https://blog.justwe.site/post/consistent-hashing/</link>
      <pubDate>Tue, 11 Jan 2022 17:11:18 +0800</pubDate>
      
      <guid>https://blog.justwe.site/post/consistent-hashing/</guid>
      <description>&lt;p&gt;我们以分布式缓存这个场景来演示一致性哈希问题&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[转] Go处理PDF</title>
      <link>https://blog.justwe.site/post/go-pdf-tools/</link>
      <pubDate>Mon, 08 Nov 2021 16:30:33 +0800</pubDate>
      
      <guid>https://blog.justwe.site/post/go-pdf-tools/</guid>
      <description>这里收集了一波 golang 处理 pdf 的工具包 原文: Go处理PDF</description>
    </item>
    
    <item>
      <title>Go高性能编程概览(1/2)</title>
      <link>https://blog.justwe.site/post/go-high-performance-step1/</link>
      <pubDate>Wed, 21 Jul 2021 14:26:14 +0800</pubDate>
      
      <guid>https://blog.justwe.site/post/go-high-performance-step1/</guid>
      <description>&lt;p&gt;这篇博客是对 &lt;a href=&#34;https://geektutu.com/post/hpg-string-concat.html&#34;&gt;&amp;lt;Go 语言高性能编程&amp;gt;&lt;/a&gt;的读后总结, 原文中会有 demo 代码, 会有 benchmark 分析, 这里会尽可能的简短的去表达&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go Json Unmarshal 出现的一些问题</title>
      <link>https://blog.justwe.site/post/go-json-unmarshal/</link>
      <pubDate>Fri, 09 Apr 2021 21:17:46 +0800</pubDate>
      
      <guid>https://blog.justwe.site/post/go-json-unmarshal/</guid>
      <description>一次偶然的情况， 使用encoding/json的 Unmarshal 处理 int 类型字段时会被处理成 float64，且使用科学记数法展示 我们先组一个数据： 1 2 3 4 5</description>
    </item>
    
    <item>
      <title>【转】Centos6 国内镜像替代</title>
      <link>https://blog.justwe.site/post/linux-centos6-mirror/</link>
      <pubDate>Tue, 19 Jan 2021 10:34:40 +0800</pubDate>
      
      <guid>https://blog.justwe.site/post/linux-centos6-mirror/</guid>
      <description>&lt;p&gt;由于 centos6 与2020年11月30日不再有官方维护, 因此国内镜像源也可以说失效了, 现在需要换个源去处理&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[转] 基于mysql实现group by取各分组最新一条数据</title>
      <link>https://blog.justwe.site/post/mysql-group-by-latest/</link>
      <pubDate>Tue, 24 Nov 2020 10:42:15 +0800</pubDate>
      
      <guid>https://blog.justwe.site/post/mysql-group-by-latest/</guid>
      <description>&lt;p&gt;mysql group by 时获取最新的数据&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>golang 使用mqtt的简单演示</title>
      <link>https://blog.justwe.site/post/tcp-mqtt/</link>
      <pubDate>Thu, 13 Aug 2020 15:43:55 +0800</pubDate>
      
      <guid>https://blog.justwe.site/post/tcp-mqtt/</guid>
      <description>&lt;p&gt;我有个毛病就是碰到一个陌生的东西感兴趣的时候, 先研究怎么开启&amp;amp;关闭, 然后跑起来再看效果, 中间碰到什么问题再说. 用最快的速度先用上, 然后优化的事情随着使用熟练度上升自然也清楚瓶颈在哪里了&lt;/p&gt;
&lt;p&gt;那么这篇文章也是这样, 就是使用go怎么使用mqtt通信, 不涉及原理, 文章止步于能跑起来一个demo, 后续怎么开发, 怎么使用就看个人体验了, 也不是一篇文章能记录下来的&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[转] 一个专家眼中的Go与Java垃圾回收算法大对比</title>
      <link>https://blog.justwe.site/post/go-java-gc/</link>
      <pubDate>Wed, 05 Aug 2020 15:51:57 +0800</pubDate>
      
      <guid>https://blog.justwe.site/post/go-java-gc/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;导读：GC 是大部分现代语言内置的特性，本文作者针对 Go 语言声称的 10ms 以下的 GC 停顿进行了深入分析，还同 Java 的垃圾收集器做了对比。Go GC 是否已经足够成熟，请看高可用架构志愿者翻译的文章。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>同步,异步,阻塞,非阻塞IO</title>
      <link>https://blog.justwe.site/post/sync-async-block-no_block-io/</link>
      <pubDate>Tue, 04 Aug 2020 21:24:00 +0800</pubDate>
      
      <guid>https://blog.justwe.site/post/sync-async-block-no_block-io/</guid>
      <description>&lt;p&gt;又到了抠字眼的时间, 解释一下同步,异步,阻塞,非阻塞IO的区别&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用go在命令行打印进度条</title>
      <link>https://blog.justwe.site/post/go-progress/</link>
      <pubDate>Wed, 29 Jul 2020 17:51:25 +0800</pubDate>
      
      <guid>https://blog.justwe.site/post/go-progress/</guid>
      <description>&lt;p&gt;打印进度条核心在于 &lt;code&gt;print(&amp;quot;\r&amp;quot;)&lt;/code&gt; 的使用&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[leetcode] Trap</title>
      <link>https://blog.justwe.site/post/leetcode-trap/</link>
      <pubDate>Wed, 01 Jul 2020 18:19:05 +0800</pubDate>
      
      <guid>https://blog.justwe.site/post/leetcode-trap/</guid>
      <description>&lt;p&gt;工作间隙摸鱼不能断, 这一次有三种解法&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TCP &#39;粘包&#39;问题</title>
      <link>https://blog.justwe.site/post/tcp-zhanbao/</link>
      <pubDate>Thu, 11 Jun 2020 17:50:27 +0800</pubDate>
      
      <guid>https://blog.justwe.site/post/tcp-zhanbao/</guid>
      <description>&lt;p&gt;有一次面试被问道TCP&amp;quot;粘包&amp;quot;问题, 当时还有点蒙, 这什么玩意? 啥是粘包?&lt;/p&gt;
&lt;p&gt;这其实是个人体验上感觉数据粘在一起了, 从这个现象上也反映出tcp的一些特性&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Markdown 使用内联ID</title>
      <link>https://blog.justwe.site/post/markdown-inline/</link>
      <pubDate>Wed, 10 Jun 2020 18:01:52 +0800</pubDate>
      
      <guid>https://blog.justwe.site/post/markdown-inline/</guid>
      <description>&lt;p&gt;使用内联元素来简化文本&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>博客图床自动匹配CDN</title>
      <link>https://blog.justwe.site/post/blog-image-cdn/</link>
      <pubDate>Mon, 20 Apr 2020 11:24:17 +0800</pubDate>
      
      <guid>https://blog.justwe.site/post/blog-image-cdn/</guid>
      <description>&lt;p&gt;使用hugo, hexo这类的博客工具的时候比较头疼的就是把图片上传图床然后替换链接&lt;/p&gt;
&lt;p&gt;于是就写了一个简单的工具来替代一下&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>关于docker for mac 占用大量硬盘的问题</title>
      <link>https://blog.justwe.site/post/docker-for-mac-huge-disk/</link>
      <pubDate>Mon, 13 Apr 2020 17:38:30 +0800</pubDate>
      
      <guid>https://blog.justwe.site/post/docker-for-mac-huge-disk/</guid>
      <description>&lt;p&gt;有一天我更新 xcode 的时候, 系统提示磁盘空间不足, 我打开一看发现 &lt;code&gt;其他&lt;/code&gt; 选项占了竟然有150G!
后来扫描了一遍, 发现了吃硬盘的大户: &lt;code&gt;docker for mac&lt;/code&gt; 和微信&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Docker 搭建 Zookeeper 测试集群</title>
      <link>https://blog.justwe.site/post/docker-zookeeper/</link>
      <pubDate>Tue, 10 Mar 2020 15:03:50 +0800</pubDate>
      
      <guid>https://blog.justwe.site/post/docker-zookeeper/</guid>
      <description>&lt;p&gt;使用 docker-compose 在本地搭建一个测试用的zookeeper集群, 顺便带个web页面方便查看&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[leetcode] SearchRange</title>
      <link>https://blog.justwe.site/post/leetcode-searchrange/</link>
      <pubDate>Mon, 24 Feb 2020 18:54:05 +0800</pubDate>
      
      <guid>https://blog.justwe.site/post/leetcode-searchrange/</guid>
      <description>&lt;p&gt;疫情期间的摸鱼活动&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[leetcode] Search</title>
      <link>https://blog.justwe.site/post/leetcode-search/</link>
      <pubDate>Fri, 21 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/leetcode-search/</guid>
      <description>&lt;p&gt;疫情期间的摸鱼活动&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[leetcode] LongestValidParentheses</title>
      <link>https://blog.justwe.site/post/leetcode-longestvalidparentheses/</link>
      <pubDate>Thu, 20 Feb 2020 18:39:13 +0800</pubDate>
      
      <guid>https://blog.justwe.site/post/leetcode-longestvalidparentheses/</guid>
      <description>&lt;p&gt;疫情期间的摸鱼活动&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[leetcode] FindSubstring</title>
      <link>https://blog.justwe.site/post/leetcode-findsubstring/</link>
      <pubDate>Wed, 19 Feb 2020 18:33:27 +0800</pubDate>
      
      <guid>https://blog.justwe.site/post/leetcode-findsubstring/</guid>
      <description>&lt;p&gt;疫情期间的摸鱼活动&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[leetcode] NextPermutation</title>
      <link>https://blog.justwe.site/post/leetcode-nextpermutation/</link>
      <pubDate>Wed, 19 Feb 2020 18:13:26 +0800</pubDate>
      
      <guid>https://blog.justwe.site/post/leetcode-nextpermutation/</guid>
      <description>&lt;p&gt;疫情期间的摸鱼活动&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[转] 羊毛党跑去京东摸了年终奖</title>
      <link>https://blog.justwe.site/post/article-1/</link>
      <pubDate>Fri, 17 Jan 2020 17:17:29 +0800</pubDate>
      
      <guid>https://blog.justwe.site/post/article-1/</guid>
      <description>每次公司搞推广搞活动的时候, 大脑里都要紧绷一根弦 1月7日，京东家电出了一个事故。 部分用户在领取京东的无门槛优惠券之后，可以用极低的价格（几十</description>
    </item>
    
    <item>
      <title>golang 简单解释内存逃逸</title>
      <link>https://blog.justwe.site/post/go-escape-heap/</link>
      <pubDate>Fri, 10 Jan 2020 17:23:23 +0800</pubDate>
      
      <guid>https://blog.justwe.site/post/go-escape-heap/</guid>
      <description>先提一个问题: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // escape.go package main import &amp;#34;fmt&amp;#34; func intSeq() func() int { i := 0 return func() int { i++ return i } } func main() { nextInt := intSeq() fmt.Println(nextInt()) fmt.Println(nextInt()) fmt.Println(nextInt()) } 会输出什么? 先简单介绍一</description>
    </item>
    
    <item>
      <title>Redis 统计uv</title>
      <link>https://blog.justwe.site/post/redis-hyperloglog/</link>
      <pubDate>Tue, 31 Dec 2019 16:27:10 +0800</pubDate>
      
      <guid>https://blog.justwe.site/post/redis-hyperloglog/</guid>
      <description>日常接需求的时候, PM提出来一个需要统计页面UV/PV的需求你怎么做? 场景 下面有三个选择: 甩给公司的大数据部门, 让他们搞去 开始记录ip ,然后</description>
    </item>
    
    <item>
      <title>关于redis缓存的日常操作</title>
      <link>https://blog.justwe.site/post/redis-tips/</link>
      <pubDate>Tue, 24 Dec 2019 11:45:20 +0800</pubDate>
      
      <guid>https://blog.justwe.site/post/redis-tips/</guid>
      <description>大致讲一下 缓存雪崩, 缓存穿透, 缓存击穿 的场景以及常规解决手段 缓存雪崩 场景: 在服务高峰期时出现大面积缓存过期的情况, 导致数据库请求被打满甚至</description>
    </item>
    
    <item>
      <title>[转] golang fmt格式“占位符”</title>
      <link>https://blog.justwe.site/post/go-fmt/</link>
      <pubDate>Thu, 19 Dec 2019 14:11:01 +0800</pubDate>
      
      <guid>https://blog.justwe.site/post/go-fmt/</guid>
      <description>golang fmt占位符的备注: 1 2 3 4 5 6 7 普通占位符 占位符 说明 举例 输出 %v 相应值的默认格式。 Printf(&amp;#34;%v&amp;#34;, people) {zhangsan}， %+v 打印结构体时，会添加字段名 Printf(&amp;#34;%+v&amp;#34;,</description>
    </item>
    
    <item>
      <title>Golang 使用 defer 的场景</title>
      <link>https://blog.justwe.site/post/go-defer/</link>
      <pubDate>Wed, 18 Dec 2019 16:58:37 +0800</pubDate>
      
      <guid>https://blog.justwe.site/post/go-defer/</guid>
      <description>defer特性 defer 是在 return 之后执行标记代码行, 直观一点就是函数从上往下一行行执行代码, 遇到defer跳过, return之后, 再从下往上依次执行r</description>
    </item>
    
    <item>
      <title>Golang值得读一下的文章-1</title>
      <link>https://blog.justwe.site/post/go-article-collection-1/</link>
      <pubDate>Tue, 17 Dec 2019 14:19:44 +0800</pubDate>
      
      <guid>https://blog.justwe.site/post/go-article-collection-1/</guid>
      <description>收藏 != 会了 [译]Go：垃圾回收器是如何监控你的应用的？ 了解一下golang的GC回收原理, 对于应用是否会造成内存泄露有一个大概了解 [译] Go</description>
    </item>
    
    <item>
      <title>elasticSearch 随笔</title>
      <link>https://blog.justwe.site/post/es-study-note/</link>
      <pubDate>Mon, 25 Nov 2019 19:40:43 +0800</pubDate>
      
      <guid>https://blog.justwe.site/post/es-study-note/</guid>
      <description>关于es的一些笔记 安装 1 2 3 git clone https://github.com/deviantony/docker-elk.git cd docker-elk docker-compose up 遇到过的问题 unable to authenticate user 终端访问: 1 curl -XGET &amp;#39;localhost:9200/_cat/health?v&amp;amp;pretty&amp;#39; 如果出现: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 { &amp;#34;error&amp;#34;: { &amp;#34;root_cause&amp;#34;: [ {</description>
    </item>
    
    <item>
      <title>go 打包文件压缩</title>
      <link>https://blog.justwe.site/post/go-build-compress/</link>
      <pubDate>Wed, 20 Nov 2019 11:31:00 +0800</pubDate>
      
      <guid>https://blog.justwe.site/post/go-build-compress/</guid>
      <description>golang文件打包后默认体积还是不小, 通过参数以及三方工具可以缓解一下 命令行参数 -ldflags 在程序编译的时候可以加上-ldflags &amp;ldquo;-s -w&amp;rdquo; 参数来优化编</description>
    </item>
    
    <item>
      <title>github-webhook 小工具</title>
      <link>https://blog.justwe.site/post/tool-github-webhook/</link>
      <pubDate>Thu, 14 Nov 2019 16:44:42 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/tool-github-webhook/</guid>
      <description>最近写了一个小工具, 用来接收github webhook消息, 以在服务器上自动执行脚本 gaopengfei123123/hook github hook server 一个用来接收webhook的server 环境 golang v1.11+</description>
    </item>
    
    <item>
      <title>转 go 模仿Unix 管道操作</title>
      <link>https://blog.justwe.site/post/go-pipe-pattern/</link>
      <pubDate>Thu, 14 Nov 2019 11:29:20 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/go-pipe-pattern/</guid>
      <description>本文摘录了许式伟 《Go，基于连接与组合的语言》部分内容，为了便于理解，我在其后端写了个完整的示例程序帮助理解，这篇文章 一是展示go在并行编程</description>
    </item>
    
    <item>
      <title>是用脚本分割csv文件</title>
      <link>https://blog.justwe.site/post/python-csv-split/</link>
      <pubDate>Mon, 11 Nov 2019 16:28:55 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/python-csv-split/</guid>
      <description>首先安装panda 1 pip install pandas 创建脚本: 1 2 3 4 import pandas as pd rows = pd.read_csv(&amp;#34;csvfile.csv&amp;#34;, chunksize=5000000) # 每个文件的尺寸, 以及导入文件名 for i, chuck in enumerate(rows): chuck.to_csv(&amp;#39;out{}.csv&amp;#39;.format(i)) # 输出文件名 运行 1 python demo.py py挽救了我半</description>
    </item>
    
    <item>
      <title>转 golang http平滑重启实现</title>
      <link>https://blog.justwe.site/post/go-http-grace-restart/</link>
      <pubDate>Mon, 04 Nov 2019 17:11:54 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/go-http-grace-restart/</guid>
      <description>服务端代码经常需要升级，对于线上系统的升级常用的做法是，通过前端的负载均衡（如nginx）来保证升级时至少有一个服务可用，依次（灰度）升级。</description>
    </item>
    
    <item>
      <title>golang 通过 context 控制并发的应用场景</title>
      <link>https://blog.justwe.site/post/go-context/</link>
      <pubDate>Fri, 25 Oct 2019 14:13:43 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/go-context/</guid>
      <description>golang 里出现多 goroutine 的场景很常见, 最常用的两种方式就是 WaitGroup 和 Context, 今天我们了解一下 Context 的应用场景 使用场景 场景一: 多goroutine执行超时通知 并发执行的业</description>
    </item>
    
    <item>
      <title>centos7 部署 k8s</title>
      <link>https://blog.justwe.site/post/k8s-install-centos7/</link>
      <pubDate>Mon, 17 Jun 2019 11:59:54 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/k8s-install-centos7/</guid>
      <description>都是走的国内镜像源 关闭 selinux 1 2 setenforce 0 #实时动态关闭 selinux sed -i &amp;#39;s/SELINUX=enforcing/SELINUX=disabled/&amp;#39; /etc/selinux/config #禁止重启后自动开启 关闭交换分区 1 2 swapoff -a #实时动态关闭交换分区 sed -i &amp;#39;/ swap / s/^/#/&amp;#39; /etc/fstab #禁止重</description>
    </item>
    
    <item>
      <title>k8s 安装 minikube</title>
      <link>https://blog.justwe.site/post/k8s-minikube/</link>
      <pubDate>Tue, 14 May 2019 11:04:46 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/k8s-minikube/</guid>
      <description>本地快速装一个微型的kubernetes环境, 翻墙的苦谁能懂? mac 本地安装minikube环境 环境需求: kubectl 本地做命令行控制用, 所有的命令操作都</description>
    </item>
    
    <item>
      <title>docker for mac 部署 kubernetes</title>
      <link>https://blog.justwe.site/post/k8s-install-docker/</link>
      <pubDate>Mon, 06 May 2019 15:58:16 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/k8s-install-docker/</guid>
      <description>docker for mac 安装kubernetes本来是很方便的, 但是国内玩家要折腾一下, 因为 gcr.io 这个域被墙了&amp;hellip; 目前来看前辈们已经把坑给淌的差不多了</description>
    </item>
    
    <item>
      <title>jmeter 对tcp进行压测</title>
      <link>https://blog.justwe.site/post/tools-jmeter/</link>
      <pubDate>Tue, 30 Apr 2019 17:45:59 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/tools-jmeter/</guid>
      <description>jmeter是个好工具, 跨平台, 有GUI, 简单易用, 扩展多 安装 本地环境为macOS Mojave 10.14.4 本地需要安装java8 jmeter官方下载地址 jmet</description>
    </item>
    
    <item>
      <title>php开发过程中不常碰到的error (2.28更新)</title>
      <link>https://blog.justwe.site/post/php-unsual-mistakes/</link>
      <pubDate>Thu, 28 Feb 2019 10:30:23 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/php-unsual-mistakes/</guid>
      <description>这里做一些备注,以防再次碰到 url 当中的参数有 &amp;amp;timestamp=1234567890这样的字段会被转义成xtamp=12345678</description>
    </item>
    
    <item>
      <title>转 Golang 需要避免踩的 50 个坑</title>
      <link>https://blog.justwe.site/post/go-50-tips/</link>
      <pubDate>Thu, 31 Jan 2019 10:18:33 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/go-50-tips/</guid>
      <description>Golang 需要避免踩的 50 个坑 以下是全文 前言 Go 是一门简单有趣的编程语言，与其他语言一样，在使用时不免会遇到很多坑，不过它们大多不是 Go 本身的设计缺陷。如</description>
    </item>
    
    <item>
      <title>关于 go 的 for range 上的一个坑</title>
      <link>https://blog.justwe.site/post/go-for-range-error/</link>
      <pubDate>Wed, 30 Jan 2019 16:22:57 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/go-for-range-error/</guid>
      <description>range作为go的一个语法糖在进行迭代的时候是很方便的, 但6是传址赋值的时候需要小心一点 出现问题 直接上代码: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15</description>
    </item>
    
    <item>
      <title>转 mac上一些好玩的命令行工具</title>
      <link>https://blog.justwe.site/post/tool-mac-terminal-awesome/</link>
      <pubDate>Fri, 18 Jan 2019 18:26:42 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/tool-mac-terminal-awesome/</guid>
      <description>mac上一些有意思的命令行小工具 asciinema 和 svg-term assiiname 是用来命令行录屏的, svg-term 将文件转换成svg动图, 这个做截屏很方便 安装: 1 2 brew install asciinema npm install -g svg-term 使用方式: 1 2</description>
    </item>
    
    <item>
      <title>用gorilla websocket 搞一个聊天室</title>
      <link>https://blog.justwe.site/post/go-chat/</link>
      <pubDate>Tue, 15 Jan 2019 11:27:36 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/go-chat/</guid>
      <description>这个demo实现了: 消息广播 心跳检测 提供了一个通过命令行来进行聊天的例子 具体逻辑都在 websocket.go 这个文件里 这里的核心就是 aliveList 这个全局变量, 负责把消息分发</description>
    </item>
    
    <item>
      <title>转 yii2 断线重连问题</title>
      <link>https://blog.justwe.site/post/yii-mysql/</link>
      <pubDate>Wed, 19 Dec 2018 11:31:00 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/yii-mysql/</guid>
      <description>yii2 + swoole 的模式下因为使用swoole做的常驻内存服务, 那么之前的设计思路会有一点偏差, 不是第一眼能看到的就是 mysql has gone away的问题 目前解决思路就</description>
    </item>
    
    <item>
      <title>go mysql数据库连接池的使用</title>
      <link>https://blog.justwe.site/post/go-mysql-pool/</link>
      <pubDate>Mon, 17 Dec 2018 14:48:26 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/go-mysql-pool/</guid>
      <description>建立一个mysql连接池将极大的缩短应用的响应时间, 减少频繁的io开销以及gc, 这在golang里面也是很容易就实现的 示例代码: 1 2 3 4 5 6</description>
    </item>
    
    <item>
      <title>go里的点点点语法</title>
      <link>https://blog.justwe.site/post/go-dotdotdot/</link>
      <pubDate>Fri, 14 Dec 2018 10:37:32 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/go-dotdotdot/</guid>
      <description>golang 代码里面有时会出现 ... 这个操作, 初次看到也是摸不到头脑, 其实他是用来做数组的析构用的 举个例子就明白了: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19</description>
    </item>
    
    <item>
      <title>crontab 设置一小时执行一次</title>
      <link>https://blog.justwe.site/post/linux-crontab/</link>
      <pubDate>Tue, 11 Dec 2018 10:55:47 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/linux-crontab/</guid>
      <description>如果主管给你个任务, 让你每小时执行一次脚本, 是不是就是这样: 1 * */1 * * * xxxxx.bash 这样就错了呦~ 以上产生的结果是每分钟执行一次, 因为从匹配角度来看每</description>
    </item>
    
    <item>
      <title>通过channel控制并发数量</title>
      <link>https://blog.justwe.site/post/go-channel-waitgroup/</link>
      <pubDate>Tue, 04 Dec 2018 14:14:30 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/go-channel-waitgroup/</guid>
      <description>使用 go 关键字有时候需要控制一下并发的数量, 但不至于去修改 runtime.GOMAXPROCS 这个数值, 这里就用到了缓冲channel的特性 demo: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17</description>
    </item>
    
    <item>
      <title>nginx转发到go服务当中</title>
      <link>https://blog.justwe.site/post/go-nginx-docker/</link>
      <pubDate>Sun, 25 Nov 2018 15:39:36 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/go-nginx-docker/</guid>
      <description>通过docker-compose编排的容器总是有一些奇怪的问题 问题核心就是go-server和nginx所属不同的容器, 需要外界能访问到go</description>
    </item>
    
    <item>
      <title>go 火焰图分析</title>
      <link>https://blog.justwe.site/post/go-flame-graph/</link>
      <pubDate>Thu, 01 Nov 2018 17:03:33 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/go-flame-graph/</guid>
      <description>go version go1.11.1 darwin/amd64 安装: 1 2 3 $ go get github.com/uber/go-torch $ cd $GOPATH/src/github.com/uber/go-torch $ git clone https://github.com/brendangregg/FlameGraph.git 安装测试工具 1 2 3 $ go get github.com/Masterminds/glide $ cd $GOPATH/src/github.com/uber/go-torch $ glide install 性能分析工具 glide install如果出现 Update failed for golang.org/x/sys: Cannot detect VCS 这种报错,</description>
    </item>
    
    <item>
      <title>git-diff</title>
      <link>https://blog.justwe.site/post/git-diff/</link>
      <pubDate>Fri, 26 Oct 2018 15:01:51 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/git-diff/</guid>
      <description>git 对比文件差异 通常 git diff COMMIT_ID_1 COMMIT_DI_2 查看 只查看更改过的文件目录 git diff --name-only COMMIT_ID_1 COMMIT_DI_2 快捷用法就是: git diff --name-only HEAD HEAD^ 对比和上次提交时的改动</description>
    </item>
    
    <item>
      <title>记一次 git revert 的经历</title>
      <link>https://blog.justwe.site/post/git-revert/</link>
      <pubDate>Thu, 25 Oct 2018 16:27:06 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/git-revert/</guid>
      <description>合作开发经常会提merge request嘛, 然后就提了一个不该提的, 还手抖给合并了&amp;hellip;. 返现问题以后准备回退, 然后抬眼一看各分支</description>
    </item>
    
    <item>
      <title>转 vscode 设置终端字体</title>
      <link>https://blog.justwe.site/post/vscode-terminal-font-macos/</link>
      <pubDate>Tue, 16 Oct 2018 15:50:28 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/vscode-terminal-font-macos/</guid>
      <description>mac 上设置vscode终端样式(尤其是想用 powershell 主题的) Mac下配置vscode终端字体： 在Mac 10.13.6下的解决方案（亲测可用），其他版本</description>
    </item>
    
    <item>
      <title>golang 处理 map[interface{}]interface{} 数据</title>
      <link>https://blog.justwe.site/post/go-complex-interface/</link>
      <pubDate>Fri, 28 Sep 2018 16:58:31 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/go-complex-interface/</guid>
      <description>go 调用 rpc , 掉用其他的服务时会出现一些神奇的数据结构, 今天我们来实验一个 上代码: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31</description>
    </item>
    
    <item>
      <title>go 开发时的一些初级问题</title>
      <link>https://blog.justwe.site/post/go-primary-mistakes/</link>
      <pubDate>Tue, 25 Sep 2018 10:57:02 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/go-primary-mistakes/</guid>
      <description>平时碰到的一些小问题, 记一下 1. assignment to entry in nil map, map 赋值问题 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44</description>
    </item>
    
    <item>
      <title>golang 的测试文件</title>
      <link>https://blog.justwe.site/post/go-test/</link>
      <pubDate>Thu, 20 Sep 2018 10:45:51 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/go-test/</guid>
      <description>一些函数没有连续的会话状态是可以写出来顺便就写一个测试脚本了 比如: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37</description>
    </item>
    
    <item>
      <title>go interface 的机制</title>
      <link>https://blog.justwe.site/post/go-interface-tip/</link>
      <pubDate>Wed, 12 Sep 2018 14:53:03 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/go-interface-tip/</guid>
      <description>对 interface 赋值变量的时候经常出的问题 日常开发时有个这样的例子: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 package main import &amp;#34;fmt&amp;#34; type Human interface { Run() } type Boy struct { Name string } func</description>
    </item>
    
    <item>
      <title>身为 phper 为什么我选择 go 语言?</title>
      <link>https://blog.justwe.site/post/go-why/</link>
      <pubDate>Wed, 12 Sep 2018 14:45:50 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/go-why/</guid>
      <description>想换个语言开发的同学可以看这里 概况 go 相比 php 有哪些优势? go 的部署简单, 运行时只要把一个二进制文件扔到机器上就行, 这一点在容器化方面优势很大 可控</description>
    </item>
    
    <item>
      <title>通过 docker-compose 搭建一个 elk</title>
      <link>https://blog.justwe.site/post/docker-elk/</link>
      <pubDate>Mon, 20 Aug 2018 14:57:47 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/docker-elk/</guid>
      <description>找了不少使用 docker-elk 搭建的博客, 英文的阅读吃力不说, 镜像源也是慢的让人头皮发麻, 因此重新编排了一个docker-compose,源都是从 https://hub.docker.com/ 上找的,</description>
    </item>
    
    <item>
      <title>搞定 git 合并冲突</title>
      <link>https://blog.justwe.site/post/git-merge-conflict/</link>
      <pubDate>Fri, 03 Aug 2018 18:40:25 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/git-merge-conflict/</guid>
      <description>这次说一下通过命令行去批量解决文件冲突的问题, 这个方法适用你清楚的知道自己需要保留哪一个分支, 而不是两个分支里的改动都要一点 关键命令 checkout 是个好</description>
    </item>
    
    <item>
      <title>不正宗 docker 入门教程-使用 docker-compose (3/3)</title>
      <link>https://blog.justwe.site/post/docker-step-3/</link>
      <pubDate>Fri, 20 Jul 2018 11:11:07 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/docker-step-3/</guid>
      <description>本章通过一个具体的demo来了解 docker-compose docker-compose 是做什么的 在构建一个完整的服务时，我们通常启动一个容器， 一旦出现多个容器需要同时启动的时候手打是下下之策</description>
    </item>
    
    <item>
      <title>不正宗 docker 入门教程-构建一个镜像(2/3)</title>
      <link>https://blog.justwe.site/post/docker-step-2/</link>
      <pubDate>Sun, 08 Jul 2018 22:54:58 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/docker-step-2/</guid>
      <description>本章讲的大概能让你明白虚拟机和 docker 的区别&amp;hellip; docker 设置了两种构建镜像的方式: 通过 docker commit 构建镜像(不推荐) 这个命令是将先有的容器制作成</description>
    </item>
    
    <item>
      <title>不正宗 docker 入门教程-启动一个容器(1/3)</title>
      <link>https://blog.justwe.site/post/docker-step-1/</link>
      <pubDate>Fri, 06 Jul 2018 18:25:44 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/docker-step-1/</guid>
      <description>从命名上就知道这是一篇简单粗暴的docker新手入门教程， 为什么要简单粗暴？ 我认为有自学能力的人帮他入门就够了， 不能自学的一时半会儿也教不会</description>
    </item>
    
    <item>
      <title>在 centOS65 环境下安装 docker</title>
      <link>https://blog.justwe.site/post/docker-install-centos65/</link>
      <pubDate>Fri, 06 Jul 2018 10:36:50 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/docker-install-centos65/</guid>
      <description>早期的 docker 对稍微老点的系统支持都不是很友好, 也是因为操作系统的一些新特性才能让 docker 运行起来 在国内的云服务商提供的 CentOS65 镜像内核都是2.6.*的，不能</description>
    </item>
    
    <item>
      <title>docker中 arg 和 env 的区别</title>
      <link>https://blog.justwe.site/post/docker-arg-env/</link>
      <pubDate>Thu, 28 Jun 2018 17:55:59 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/docker-arg-env/</guid>
      <description>在使用 docker-compoe 构建镜像的时候会感觉 ARG 和 ENV 的作用很相似, 但是这两个存在就肯定有它的原因 它们起作用的时机 arg 是在 build 的时候存在的, 可以在 Dockerfile 中当做变量来使用</description>
    </item>
    
    <item>
      <title>git调整 ssh 登录参数</title>
      <link>https://blog.justwe.site/post/git-sshcommand/</link>
      <pubDate>Sat, 23 Jun 2018 23:39:17 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/git-sshcommand/</guid>
      <description>指定 ssh 命令使用时的签名文件 进入 app的.git/config 文件下 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Engine: [core] repositoryformatversion = 0 filemode = true bare = false logallrefupdates = true ignorecase = true precomposeunicode = true #</description>
    </item>
    
    <item>
      <title>自定义 gii 模板</title>
      <link>https://blog.justwe.site/post/yii-gii/</link>
      <pubDate>Wed, 23 May 2018 14:15:12 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/yii-gii/</guid>
      <description>开发是需要用到 gii,但是 gii 并不是完全符合自己的开发需求,所以需要对他做一点改造 这里先拿 basic 版举例, advance版同理 1.修改配置文件 web.php 1 2</description>
    </item>
    
    <item>
      <title>十进制与二进制,八进制,十六进制的换算</title>
      <link>https://blog.justwe.site/post/conversion-calculation/</link>
      <pubDate>Wed, 23 May 2018 10:58:29 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/conversion-calculation/</guid>
      <description>复习一下二进制,八进制,十六进制之间的互相转换和怎么用十进制去转换它们 首先做一个定义： B(Binary)表示二进制，O(Octal)表示八进</description>
    </item>
    
    <item>
      <title>基于rabbitmq实现的延时队列(golang版)</title>
      <link>https://blog.justwe.site/post/go-rabbitmq-delay-queue/</link>
      <pubDate>Mon, 14 May 2018 21:37:40 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/go-rabbitmq-delay-queue/</guid>
      <description>虽然 rabbitmq 没有延时队列的功能,但是稍微变动一下也是可以实现的 实现延时队列的基本要素 存在一个倒计时机制:Time To Live(TTL) 当到达时间点的时候会触发一个发</description>
    </item>
    
    <item>
      <title>有关 restful 借口规范踩到的坑</title>
      <link>https://blog.justwe.site/post/php-restful/</link>
      <pubDate>Wed, 09 May 2018 10:47:39 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/php-restful/</guid>
      <description>使用 restful 接口规范开发时我碰到的几个槽点&amp;hellip; restful提供了一种接口规范,本意是让路由变得更加易懂,不过既然是规则那么就有束缚,</description>
    </item>
    
    <item>
      <title>go 开发过程中一些不错的工具(不定期更新)</title>
      <link>https://blog.justwe.site/post/golang-awesome-tools/</link>
      <pubDate>Mon, 26 Mar 2018 20:20:00 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/golang-awesome-tools/</guid>
      <description>就是平时用到的一些工具 fswatch 用于监听目录文件的修改,一旦发生修改将自动执行系统指令,比如保存后自动 go run 之类的, 这个使用 go 写的 codeskyblue/fswatch 还有个跨平台的命令</description>
    </item>
    
    <item>
      <title>docker-volume</title>
      <link>https://blog.justwe.site/post/docker-volume/</link>
      <pubDate>Tue, 13 Feb 2018 13:24:30 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/docker-volume/</guid>
      <description>这里有一个使用 wordpress 的 docker-compose.yml的示例: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 version: &amp;#39;3&amp;#39; services: db: image: mysql:5.7 volumes: - db_data:/var/lib/mysql restart:</description>
    </item>
    
    <item>
      <title>docker-compose.yml 常用命令</title>
      <link>https://blog.justwe.site/post/docker-compose-yml/</link>
      <pubDate>Mon, 12 Feb 2018 10:36:50 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/docker-compose-yml/</guid>
      <description>常用命令备注 build 构建(重构)服务容器 格式为: docker-compose build [options] [service...] --force-rm 删除构建时的临时容器 --no-cache 构建不使用 cache --pull 始终尝试 pull 最新的镜像 up (这个才是最常用的) docker-compose up [options] [service...] 直</description>
    </item>
    
    <item>
      <title>使用 go 进行 jwt 验证</title>
      <link>https://blog.justwe.site/post/go-jwt/</link>
      <pubDate>Mon, 22 Jan 2018 14:04:26 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/go-jwt/</guid>
      <description>对于使用负载均衡的服务器来说,使用 JWT(JSON WEB TOKEN) 是一个更优的选择,session受到单台服务器的限制,一个用户登录过后就只能分配到 这一台服务器上,这</description>
    </item>
    
    <item>
      <title>关于跨域请求的二三事</title>
      <link>https://blog.justwe.site/post/http-cross-domain-etc/</link>
      <pubDate>Tue, 16 Jan 2018 17:29:54 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/http-cross-domain-etc/</guid>
      <description>在前后端分离开发时跨域经常是一个不可回避的问题,这里介绍一个比较简单的办法,前端 vue.js,后端 go 首先要区分简单请求和复杂请求 这里阮一峰</description>
    </item>
    
    <item>
      <title>转 在 vue-cli 中使用 svg 做 icon</title>
      <link>https://blog.justwe.site/post/vue-svg-icon/</link>
      <pubDate>Tue, 26 Dec 2017 17:03:55 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/vue-svg-icon/</guid>
      <description>之前都是用的image sprite或者使用的 Font Awesome这类的开源库 现在咱们已经走进了现代浏览器的年代(ie9+),可以玩点新鲜的东西了</description>
    </item>
    
    <item>
      <title>关于 chrome 浏览器会强制跳转到 https 的问题</title>
      <link>https://blog.justwe.site/post/chrome-redirection-https/</link>
      <pubDate>Tue, 19 Dec 2017 10:34:25 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/chrome-redirection-https/</guid>
      <description>我在本地使用的是 *.app 的域名开发的,某一天发现使用谷歌的时候会强制跳转到 https,改成http都不管用 询问了一下万能的404网站,查询的结果大</description>
    </item>
    
    <item>
      <title>sense-HAT api 文档</title>
      <link>https://blog.justwe.site/post/raspberry-pi3-sense-hat-api/</link>
      <pubDate>Thu, 30 Nov 2017 13:57:18 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/raspberry-pi3-sense-hat-api/</guid>
      <description>从官方给的 api 文档中硬翻的&amp;hellip; LED 模型 set_rotation 设置翻转角度 这个函数可以设置 led 的旋转角度 参数 类型 可选参数 描述 r Integer 0,90,180,270 0指的是树莓派 HDMI 接口向下的</description>
    </item>
    
    <item>
      <title>树莓派3安装 sense HAT</title>
      <link>https://blog.justwe.site/post/raspberry-pi3-install-sense-hat/</link>
      <pubDate>Wed, 29 Nov 2017 13:21:26 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/raspberry-pi3-install-sense-hat/</guid>
      <description>因为感觉各种感应器的 GPIO 有点乱,干脆买了一个官方提供的集成板来玩,这样看着也整体一些&amp;hellip; 英文不错的同学出门右转: 官方提供的一个说明</description>
    </item>
    
    <item>
      <title>树莓派的一些报错问题</title>
      <link>https://blog.justwe.site/post/raspberry-pi3-local-lang/</link>
      <pubDate>Tue, 28 Nov 2017 14:50:49 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/raspberry-pi3-local-lang/</guid>
      <description>树莓派出现本地语言出现问题 1 2 3 4 5 6 7 8 9 10 11 12 perl: warning: Setting locale failed. perl: warning: Please check that your locale settings: LANGUAGE = &amp;#34;en_US.UTF-8&amp;#34;, LC_ALL = &amp;#34;en_US.UTF-8&amp;#34;, LC_CTYPE = &amp;#34;zh_CN.UTF-8&amp;#34;, LANG = &amp;#34;en_US.UTF-8&amp;#34; are supported and installed on your system. perl: warning: Falling back to the standard locale (&amp;#34;C&amp;#34;). locale: Cannot set LC_CTYPE</description>
    </item>
    
    <item>
      <title>树莓派上安装 golang</title>
      <link>https://blog.justwe.site/post/raspberry-pi3-golang-env/</link>
      <pubDate>Wed, 22 Nov 2017 10:30:03 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/raspberry-pi3-golang-env/</guid>
      <description>树莓派上需要进行编译安装,不过很简单,而且 golang 官方也有 arm 平台的编译包, 在树莓派上一定要选linux-armv61这个版本啊 golang 各版本的下载列表 $</description>
    </item>
    
    <item>
      <title>用树莓派3搞一个信号灯输出</title>
      <link>https://blog.justwe.site/post/raspberry-pi3-traffic-light/</link>
      <pubDate>Tue, 21 Nov 2017 14:26:24 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/raspberry-pi3-traffic-light/</guid>
      <description>通过一个python脚本跑一个监控 cpu 的交通信号灯,运行环境是官方的系统 Raspbian 执行脚本 有编程基础的同学就直接上手好了: 1 2 3 4 5 6 7 8 9 10 11 12 13 14</description>
    </item>
    
    <item>
      <title>转 烧录树莓派系统(新手版)</title>
      <link>https://blog.justwe.site/post/raspberry-pi3-install/</link>
      <pubDate>Tue, 21 Nov 2017 14:24:29 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/raspberry-pi3-install/</guid>
      <description>怎么在 mac 上给 TF 卡烧录一个树莓派系统(为什么没有 win 的?因为 win 上的烧录软件很好用啊!混蛋!) 下载树莓派镜像 首先需要下载个系统镜像 官方镜像列表 RASPBIAN :</description>
    </item>
    
    <item>
      <title>转 json移除非法 utf8字符串</title>
      <link>https://blog.justwe.site/post/php-json-error/</link>
      <pubDate>Wed, 08 Nov 2017 11:17:21 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/php-json-error/</guid>
      <description>当 json_decode 解析为 null 的时候怎么处理 当 json 中出现非法 utf8 时怎么处理 失败时返回NULL 当返回 null 的时候,可以用json_last_error()根据返回码来判</description>
    </item>
    
    <item>
      <title>js promise 对象</title>
      <link>https://blog.justwe.site/post/js-promise/</link>
      <pubDate>Tue, 31 Oct 2017 23:11:45 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/js-promise/</guid>
      <description>我们本次要了解一下 es6 中的 Promise 对象 then() 在 ES6 中函数有一个很明显的区别就是一些异步函数中不再是使用回调函数callback(),而是then() 方法来</description>
    </item>
    
    <item>
      <title>关于 elementUI 中的 intput 框的enter 事件</title>
      <link>https://blog.justwe.site/post/elementui-form-event/</link>
      <pubDate>Fri, 15 Sep 2017 11:42:23 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/elementui-form-event/</guid>
      <description>在文档中没有出现相关的说明,但是在实际使用中确实需要用到,怎么办呢? 这里有一个示例: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 &amp;lt;el-form :inline=&amp;#34;true&amp;#34; :model=&amp;#34;price_form&amp;#34; :rules=&amp;#34;price_rules&amp;#34; ref=&amp;#34;priceForm&amp;#34; @submit.native.prevent v-if=&amp;#34;scope.row.edit_deposit&amp;#34; &amp;gt;</description>
    </item>
    
    <item>
      <title>[中文] 《长恨歌》</title>
      <link>https://blog.justwe.site/post/chinese-preview/</link>
      <pubDate>Wed, 30 Aug 2017 01:37:56 +0800</pubDate>
      
      <guid>https://blog.justwe.site/post/chinese-preview/</guid>
      <description>《长恨歌》是中国唐朝诗人白居易的一首长篇叙事诗。 第一段：贵妃受宠爱 汉皇重色思倾国，御宇多年求不得。杨家有女初长成，养在深闺人未识。 天生丽质难</description>
    </item>
    
    <item>
      <title>转 做一枚全栈工程师</title>
      <link>https://blog.justwe.site/post/be-a-fullstack-engineer/</link>
      <pubDate>Tue, 22 Aug 2017 11:57:09 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/be-a-fullstack-engineer/</guid>
      <description>这篇热门文章在 2017 年 6 月更新过，引入了更多新技术。 如果一个全栈工程师能够根据原型实现一个完整的MVP（minimum viable product，至少可行</description>
    </item>
    
    <item>
      <title>Vue的一个拖动插件</title>
      <link>https://blog.justwe.site/post/vue-dnd/</link>
      <pubDate>Mon, 21 Aug 2017 17:11:28 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/vue-dnd/</guid>
      <description>这里介绍一个拿来即用的拖动插件 这里只是一个 es5 的 demo 先上代码: 简单的拖动排序示例 {% jsfiddle 92dcvg1u %} 拖动 clone 示例 {% jsfiddle ebemtLz6 %} 这里用上了 option 中的 group配置, group:{ name:&#39;people&#39;, pull:</description>
    </item>
    
    <item>
      <title>我还活着</title>
      <link>https://blog.justwe.site/post/i-am-alive/</link>
      <pubDate>Mon, 14 Aug 2017 09:42:55 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/i-am-alive/</guid>
      <description>最近这两个月工作忙到飞起,等10月份再玩点儿新东西</description>
    </item>
    
    <item>
      <title>js生成笛卡尔积数组</title>
      <link>https://blog.justwe.site/post/js-decartes/</link>
      <pubDate>Tue, 18 Jul 2017 10:36:50 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/js-decartes/</guid>
      <description>以下转载了来自 segmentfault的一个回答 第一种 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 &amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt; var data = new Array(new Array(1, 2, 3), new Array(4, 5, 6)); var result = []; console.log(data); function descartes(arrIndex, aresult){ if (arrIndex</description>
    </item>
    
    <item>
      <title>PHP 单例</title>
      <link>https://blog.justwe.site/post/php-singleton/</link>
      <pubDate>Fri, 14 Jul 2017 11:05:31 +0800</pubDate>
      
      <guid>https://blog.justwe.site/post/php-singleton/</guid>
      <description>&lt;p&gt;关于php单例模式的使用&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>element-dialog</title>
      <link>https://blog.justwe.site/post/element-dialog/</link>
      <pubDate>Tue, 11 Jul 2017 19:50:33 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/element-dialog/</guid>
      <description>使用 elementui 的对话框示例出现问题,esc 或者点击右上的 X 没反应,目前的规避方式就是把 :visible.sync=&amp;quot;dialogFormVisible&amp;quot; 用 v-model=&amp;quot;dialogFormVisible&amp;quot; 代替,如果下 1 2 3 4 5 6 7 8 9 10 11 &amp;lt;el-dialog title=&amp;#34</description>
    </item>
    
    <item>
      <title>记一次 hexo 报错经历</title>
      <link>https://blog.justwe.site/post/hexo-error-reinstall/</link>
      <pubDate>Thu, 29 Jun 2017 15:49:58 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/hexo-error-reinstall/</guid>
      <description>就在今天,吾心中忽有所感,心想不如升级一发环境版本?结果就立马受到了环境的制裁&amp;hellip;. 报错信息如下: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15</description>
    </item>
    
    <item>
      <title>转 my.cnf 文件注释信息</title>
      <link>https://blog.justwe.site/post/mysql-config/</link>
      <pubDate>Thu, 29 Jun 2017 15:17:52 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/mysql-config/</guid>
      <description>MySQL配置文件my.cnf 例子最详细翻译,可以保存做笔记用。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38</description>
    </item>
    
    <item>
      <title>PHP标准类库系列 Iterator</title>
      <link>https://blog.justwe.site/post/php-spl-iterator/</link>
      <pubDate>Tue, 27 Jun 2017 11:35:37 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/php-spl-iterator/</guid>
      <description>迭代器,让对象可用 foreach,for,while方法 啥是 Iterator 是一种 php 提供的接口标准,可以将不同的类迭代调用统一成一样的方法,打个比方(话说</description>
    </item>
    
    <item>
      <title>PHP标准类库系列 arrayAccess</title>
      <link>https://blog.justwe.site/post/php-spl-arrayaccess/</link>
      <pubDate>Mon, 26 Jun 2017 17:22:53 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/php-spl-arrayaccess/</guid>
      <description>现在很多的 php 框架模型调取属性的时候可以按照数组的方式去调用,这是因为使用了arrayAccess这个接口 什么是 SPL? SPL 是 Standard PHP Library 的缩写,是官方在 p</description>
    </item>
    
    <item>
      <title>__callstatic</title>
      <link>https://blog.justwe.site/post/php-callstatic/</link>
      <pubDate>Fri, 23 Jun 2017 16:50:15 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/php-callstatic/</guid>
      <description>现在很多框架中调用方法都是Foo::bar()这种格式的,但是他们真的是静态方法吗? 这种情况在 larave 中尤其常见,但是开发过程中很明显这些有一部分</description>
    </item>
    
    <item>
      <title>git-error-permission</title>
      <link>https://blog.justwe.site/post/git-error-permission/</link>
      <pubDate>Fri, 23 Jun 2017 16:46:13 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/git-error-permission/</guid>
      <description>这种情况在部署 webhook 的时候经常会碰到 报错信息: git error insufficient permission for adding an object 这种报错就是权限错误,把项目中的.git 文件整体改成你的执行权限就行 有一点要注意,</description>
    </item>
    
    <item>
      <title>转 跨域请求时两次发送请求的问题</title>
      <link>https://blog.justwe.site/post/axios-cors/</link>
      <pubDate>Fri, 23 Jun 2017 16:42:38 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/axios-cors/</guid>
      <description>跨域的时候总会碰上各种各样的问题,这就是其中一种情况 检查一下，两次请求分别的 Request Method: 因为是跨域请求，客户端发先发送一个OPTIONS 请求 Preflighted Req</description>
    </item>
    
    <item>
      <title>git同步所 fork 的库代码</title>
      <link>https://blog.justwe.site/post/git-fork-upstream/</link>
      <pubDate>Sat, 17 Jun 2017 14:36:23 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/git-fork-upstream/</guid>
      <description>有时候我们 fork 了一个库进行开发,但是时间长了那个库已经添加了一些新的东西,这要怎么处理呢? 先添加你 fork 的库的地址 1 2 git remote add FORK-sync https://github.com/xxx/yyy.git git remote -v 能看到类似的</description>
    </item>
    
    <item>
      <title>go操作 json 文本</title>
      <link>https://blog.justwe.site/post/go-json/</link>
      <pubDate>Mon, 05 Jun 2017 22:18:51 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/go-json/</guid>
      <description>一些简单的导入导出 事先准备一个 json 文件 首先我们准备一个 json 文件,我直接就用的package.json里的一些字段 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16</description>
    </item>
    
    <item>
      <title>关于使用 git 的操作流程</title>
      <link>https://blog.justwe.site/post/git-workflow/</link>
      <pubDate>Sat, 27 May 2017 13:24:32 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/git-workflow/</guid>
      <description>老夫的毕生功力都在这了&amp;hellip; 通常我们工作时是这样操作 说一下使用 git 做版本控制的时候的工作流程 1 2 3 4 git add -A #需要添加到版本库中的文件</description>
    </item>
    
    <item>
      <title>laravel54初始化迁移失败</title>
      <link>https://blog.justwe.site/post/laravel54-migrate-error/</link>
      <pubDate>Wed, 24 May 2017 11:55:45 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/laravel54-migrate-error/</guid>
      <description>在新版的 laravel 框架当中(v5.4.23) 出现了报错 1 2 3 4 [Illuminate\Database\QueryException] SQLSTATE[42000]: Syntax error or access violation: 1071 Specified key was t oo long; max key length is 767 bytes (SQL: alter table `users` add unique ` users_email_unique`(`email`)) 错误重现: laravel 版本 5.4.23 配置好数据库</description>
    </item>
    
    <item>
      <title>go-mysql</title>
      <link>https://blog.justwe.site/post/go-mysql/</link>
      <pubDate>Wed, 17 May 2017 23:32:12 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/go-mysql/</guid>
      <description>这里写一个go 操作 mysql 的 curd 的 demo 表结构是这样的 1 2 3 4 5 6 create table test( id int primary key auto_increment, name varchar(20) default &amp;#39;&amp;#39;, age int default 0, created_at int default 0 ) go 的文件是: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16</description>
    </item>
    
    <item>
      <title>php-callback-func</title>
      <link>https://blog.justwe.site/post/php-callback-func/</link>
      <pubDate>Thu, 11 May 2017 18:31:59 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/php-callback-func/</guid>
      <description>你知道茴香的茴有四种写法,那你知道 php 的回调也有四种写法吗? 匿名函数 1 2 3 4 var $array = [1,2,3]; array_map(function($item){ return $item; },$array); 类静态调用 1 2 3 4 5 6 7 8 9 10 class A { static function test($req) { echo &amp;#34;hello world&amp;#34;;</description>
    </item>
    
    <item>
      <title>git-askpass-error</title>
      <link>https://blog.justwe.site/post/git-askpass-error/</link>
      <pubDate>Mon, 08 May 2017 22:31:42 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/git-askpass-error/</guid>
      <description>git 的账号密码错误情况 error 前段时间使用 phpstrom 中的 git 出现了一个错误 1 2 3 4 Fetch failed error: unable to read askpass response from &amp;#39;..\tmp\intellij-git-askpass.bat&amp;#39; error: failed to execute prompt script (exit code 1) fatal: could not read Username for &amp;#39;http://xxx:3000&amp;#39;: No error 大体情况就是某一次操</description>
    </item>
    
    <item>
      <title>vue-transition</title>
      <link>https://blog.justwe.site/post/vue-transition/</link>
      <pubDate>Sat, 06 May 2017 13:24:23 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/vue-transition/</guid>
      <description>对 vue 的渐变效果的简单使用 单个节点的渐变效果 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;utf-8&amp;#34;&amp;gt; &amp;lt;tit</description>
    </item>
    
    <item>
      <title>使用 axios-post 提交数据</title>
      <link>https://blog.justwe.site/post/vue-axios-post/</link>
      <pubDate>Tue, 02 May 2017 16:45:00 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/vue-axios-post/</guid>
      <description>继 vue-resource 之后, axios 是 vue 官方首推的网络请求组件 axios简介 它的功能更强大,而且可以无痛迁移到新的项目当中,有尤大的原话就是: 最近团队讨论了一下，A</description>
    </item>
    
    <item>
      <title>jquery 中$(this) 和 this 的区别</title>
      <link>https://blog.justwe.site/post/jquery-this/</link>
      <pubDate>Tue, 02 May 2017 11:39:31 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/jquery-this/</guid>
      <description>说一个常识性的东西,帮助自己回忆一下 一句话, $(this)是 jquery 的对象,而 this 是 html 元素对象 什么意思呢? $(this) 可以调用jquery 中的方法 1 2 $(this).val() $(this).addClass() 而 this</description>
    </item>
    
    <item>
      <title>&lt;转&gt; 关于 ssh 的 25 条实用命令</title>
      <link>https://blog.justwe.site/post/ssh-command/</link>
      <pubDate>Fri, 28 Apr 2017 10:02:50 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/ssh-command/</guid>
      <description>OpenSSH是SSH连接工具的免费版本。telnet，rlogin和ftp用户可能还没意识到他们在互联网上传输的密码是未加密的，但SSH是</description>
    </item>
    
    <item>
      <title>go-http</title>
      <link>https://blog.justwe.site/post/go-http/</link>
      <pubDate>Wed, 26 Apr 2017 23:11:29 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/go-http/</guid>
      <description>用于了解 http 包的一些运行机制 首先一个简单的例子 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;strings&amp;#34; &amp;#34;log&amp;#34; ) func sayhelloName(w http.ResponseWriter, r *http.Request) { r.ParseForm() //</description>
    </item>
    
    <item>
      <title>go-comma-switch</title>
      <link>https://blog.justwe.site/post/go-comma-switch/</link>
      <pubDate>Mon, 24 Apr 2017 22:52:37 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/go-comma-switch/</guid>
      <description>简单介绍下 comma-ok 和 switch 用来判定变量类型 上篇博客介绍了接口,接口在实际应用中可以当做一个万用变量来用,可以用一个空接口来存储多种类型的变量 但是,当我</description>
    </item>
    
    <item>
      <title>go-interface</title>
      <link>https://blog.justwe.site/post/go-interface/</link>
      <pubDate>Wed, 19 Apr 2017 23:43:41 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/go-interface/</guid>
      <description>关于 go 语言接口的简单介绍 接口对于 go 实现面向对象来说非常重要,如果没有它 go 的结构体(struct)也就只能存储一些信息, 但是相关的方法将会变得</description>
    </item>
    
    <item>
      <title>go-simple-webserver-demo</title>
      <link>https://blog.justwe.site/post/go-simple-webserver-demo/</link>
      <pubDate>Tue, 18 Apr 2017 23:25:04 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/go-simple-webserver-demo/</guid>
      <description>用 go 写的一个简单的 http 服务 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;strings&amp;#34; &amp;#34;log&amp;#34; ) func sayhelloName(w http.ResponseWriter, r *http.Request) { r.ParseForm() //解析参数,默认不解析</description>
    </item>
    
    <item>
      <title>git-submodule</title>
      <link>https://blog.justwe.site/post/git-submodule/</link>
      <pubDate>Tue, 11 Apr 2017 14:34:36 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/git-submodule/</guid>
      <description>项目中经常会使用到第三方的 git 库,将三方库整合到项目中最简单的办法就是复制粘贴,但是如果这个库升级了一个很酷炫的功能,你要怎么整合进来呢? 这就</description>
    </item>
    
    <item>
      <title>npm-DTrace</title>
      <link>https://blog.justwe.site/post/npm-dtrace/</link>
      <pubDate>Mon, 10 Apr 2017 22:21:13 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/npm-dtrace/</guid>
      <description>安装npm模块的时候有时候会提示Error: Cannot find module &#39;./build/Release/DTraceProviderBindings 虽然会正常运行但是总是报这个错也是很不爽的,查了下相关的 issues 比较直接的解决方法是 1 sudo npm install dtrace-provider</description>
    </item>
    
    <item>
      <title>docker-composer-install</title>
      <link>https://blog.justwe.site/post/docker-composer-install/</link>
      <pubDate>Mon, 10 Apr 2017 22:14:01 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/docker-composer-install/</guid>
      <description>安装 docker-composer 1 2 3 curl -L https://github.com/docker/compose/releases/download/1.1.0/docker-compose-`uname -s`-`uname -m` &amp;gt; /usr/local/bin/docker-compose chmod +x /usr/local/bin/docker-compose 可能会有被墙的情况,可以找一下国内的云服务商,比如 DaoCloud</description>
    </item>
    
    <item>
      <title>brew-update</title>
      <link>https://blog.justwe.site/post/brew-update/</link>
      <pubDate>Sun, 09 Apr 2017 23:36:54 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/brew-update/</guid>
      <description>brew更新软件时常用的操作 安装 brew ruby -e &amp;quot;$(curl -fsSL https://raw.github.com/Homebrew/homebrew/Go/install)&amp;quot; 搜索 brew search MySQL 查看程序具体信息 brew info mysql 更新 brew brew update 更新软件 brew upgrade mysql 如果不指定更新哪个则会更新所有可以更新的</description>
    </item>
    
    <item>
      <title>yii-multi-database</title>
      <link>https://blog.justwe.site/post/yii-multi-database/</link>
      <pubDate>Sat, 08 Apr 2017 17:31:31 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/yii-multi-database/</guid>
      <description>在项目中经常会碰到多个数据库的情况,在 yii 中也是可以快速设置的 演示的版本是 basic 版,但是原理很好理解 编辑配置文件 @app/config/web.php 1 2 3 4 ...... &amp;#39;db&amp;#39; =&amp;gt; require(__DIR__ . &amp;#39;/db.php&amp;#39;), //框架提供</description>
    </item>
    
    <item>
      <title>json-format</title>
      <link>https://blog.justwe.site/post/json-format/</link>
      <pubDate>Sat, 08 Apr 2017 11:01:00 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/json-format/</guid>
      <description>如何将 json 格式化打印出来 想练手的可以手写一个出来,比如 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44</description>
    </item>
    
    <item>
      <title>hexo-next-title</title>
      <link>https://blog.justwe.site/post/hexo-next-title/</link>
      <pubDate>Fri, 07 Apr 2017 15:04:39 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/hexo-next-title/</guid>
      <description>hexo-next 是一个很完美的组合,这次我碰到的问题就是 title 不能显示&amp;lt;hello-world/&amp;gt; 这样的文本 比如你的网站配置文件_config.y</description>
    </item>
    
    <item>
      <title>laravel-auth</title>
      <link>https://blog.justwe.site/post/laravel-auth/</link>
      <pubDate>Sat, 01 Apr 2017 20:57:12 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/laravel-auth/</guid>
      <description>原文出处 auth提供了很方便的登录体系，已经做到了开箱即用的便捷，但是任何方便的工具都是需要花费学习成本的，了解的过程就由些痛苦了：） 本着松</description>
    </item>
    
    <item>
      <title>laravel-error-log</title>
      <link>https://blog.justwe.site/post/laravel-error-log/</link>
      <pubDate>Sat, 01 Apr 2017 20:51:06 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/laravel-error-log/</guid>
      <description>laravel有一套方便的错误采集和报错机制，如果是开发api的时候我们不需要报错页面显示的那么详细，只想返回一些错误信息，而不用把所有的响</description>
    </item>
    
    <item>
      <title>pip</title>
      <link>https://blog.justwe.site/post/pip/</link>
      <pubDate>Sat, 01 Apr 2017 20:32:13 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/pip/</guid>
      <description>pip语言环境配置出错 root@ubuntu:~# locale 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 locale: Cannot set LC_ALL to default locale: No such file or directory LANG=en_US.UTF-8 LANGUAGE= LC_CTYPE=&amp;#34;en_US.UTF-8&amp;#34; LC_NUMERIC=zh_CN.UTF-8 LC_TIME=zh_CN.UTF-8 LC_COLLATE=&amp;#34;en_US.UTF-8&amp;#34; LC_MONETARY=zh_CN.UTF-8 LC_MESSAGES=&amp;#34;en_US.UTF-8&amp;#34; LC_PAPER=zh_CN.UTF-8 LC_NAME=zh_CN.UTF-8 LC_ADDRESS=zh_CN.UTF-8 LC_TELEPHONE=zh_CN.UTF-8 LC_MEASUREMENT=zh_CN.UTF-8 LC_IDENTIFICATION=zh_CN.UTF-8 LC_ALL= root@ubuntu:~# export LC_ALL=C 1 2 3 4 5 6 7 8 9 10 11</description>
    </item>
    
    <item>
      <title>brew权限问题</title>
      <link>https://blog.justwe.site/post/brew-install/</link>
      <pubDate>Fri, 31 Mar 2017 14:38:36 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/brew-install/</guid>
      <description>在一个新的环境下安装 homebrew 新装系统时难免会遇到权限的问题，在老版系统下（osx 10.10.* )需要一些权限设置，方式如下: 1 2 3 4 5 sudo chown -R $(whoami):admin /usr/local sudo chown -R $(whoami) /Library/Caches/Homebrew brew doctor</description>
    </item>
    
    <item>
      <title>hexo-next 的一些配置</title>
      <link>https://blog.justwe.site/post/webconfig/</link>
      <pubDate>Thu, 30 Mar 2017 21:06:50 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/webconfig/</guid>
      <description>目前对 hexo-next 添加的功能 搜索 1 $ npm install hexo-generator-searchdb --save 站点配置文件 1 2 3 4 5 search: path: search.xml field: post format: html limit: 10000 next主题配置文件 1 2 3 # Local search local_search: enable: true 生成 sitemap 1 2 $ npm install hexo-generator-sitemap --save $ npm install hexo-generator-baidu-sitemap</description>
    </item>
    
    <item>
      <title>震惊！彩票的随机机制竟然是这样的.....</title>
      <link>https://blog.justwe.site/post/caipiao/</link>
      <pubDate>Fri, 24 Mar 2017 06:01:17 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/caipiao/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 ### &amp;lt;?php $lanList = []; $hongList = []; for($i=1;$i&amp;lt;34;$i++){ if($i&amp;lt;16){ array_push($lanList,$i); } array_push($hongList, $i); } $res = [ &amp;#39;red&amp;#39; =&amp;gt; [], &amp;#39;blue&amp;#39; =&amp;gt; [] ]; for($i=0;$i&amp;lt;=6;$i++){ if($i==0){ $res[&amp;#39;blue&amp;#39;] = array_slice($lanList, mt_rand( 0,count($lanList)-1) ,1); } $res[&amp;#39;red&amp;#39;][] = array_splice($hongList, mt_rand( 0,count($hongList)-1),1)[0]; } sort($res[&amp;#39;red&amp;#39;]);</description>
    </item>
    
    <item>
      <title>symfony-路由</title>
      <link>https://blog.justwe.site/post/symfony-router/</link>
      <pubDate>Thu, 23 Mar 2017 11:25:49 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/symfony-router/</guid>
      <description>laravel的路由模块就是从这里封装起来的，咱们先了解下symfony的路由机制 使用注释定义一个路由 symfony 的强大之处在于代码中的注释都参与到程</description>
    </item>
    
    <item>
      <title>使用hexo构建博客</title>
      <link>https://blog.justwe.site/post/install/</link>
      <pubDate>Wed, 22 Mar 2017 15:31:55 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/install/</guid>
      <description>本地搭建 hexo 构建hexo需要在本地安装node.js 1 brew install node 当前版本的node版本 1 2 node -v v7.7.3 全局安装 hexo 1 npm install -g hexo 国外镜像慢的话可以搜索找下淘宝</description>
    </item>
    
    <item>
      <title>使用hexo和github-pages发布博客</title>
      <link>https://blog.justwe.site/post/hexo-blog/</link>
      <pubDate>Wed, 22 Mar 2017 10:18:00 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/hexo-blog/</guid>
      <description>本地搭建 hexo 构建hexo需要在本地安装node.js 1 brew install node 当前版本的node版本 1 2 node -v v7.7.3 全局安装 hexo 1 npm install -g hexo 国外镜像慢的话可以搜索找下淘宝</description>
    </item>
    
    <item>
      <title>laravel事务</title>
      <link>https://blog.justwe.site/post/laravel-trancate/</link>
      <pubDate>Tue, 21 Mar 2017 09:01:02 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/laravel-trancate/</guid>
      <description>laravel 事务的使用会忽略的地方 laravel开启事物有两种方法： 一种是闭包 1 2 3 4 5 DB::transaction(function() { DB::table(&amp;#39;user&amp;#39;)-&amp;gt;insert([&amp;#39;username&amp;#39;=&amp;gt;&amp;#39;xxx&amp;#39;]); DB::table(&amp;#39;comment&amp;#39;)-&amp;gt;insert([&amp;#39;content&amp;#39;=&amp;gt;&amp;#39;zzz&amp;#39;]); }); 当闭包内发生错误就会自动回滚 另一种比较灵活 1 2 3 4 5</description>
    </item>
    
    <item>
      <title>go语言了解(3) 工作流程</title>
      <link>https://blog.justwe.site/post/go-workflow/</link>
      <pubDate>Sun, 19 Mar 2017 15:58:05 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/go-workflow/</guid>
      <description>本章将的关键字有 defer,panic,recover,main,init,import defer go语言中有一个不错的设计，就是defer。尤其是调用资源时需要打开和关闭两个选项的时候就能凸显出来 它的作用是将指定的语</description>
    </item>
    
    <item>
      <title>go语言了解(2)--切片</title>
      <link>https://blog.justwe.site/post/go-slice/</link>
      <pubDate>Tue, 14 Mar 2017 10:12:03 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/go-slice/</guid>
      <description>切片是一种复合类型，可以是数组也可以是字符串 接下来是一个简单切片使用示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34</description>
    </item>
    
    <item>
      <title>git标签操作</title>
      <link>https://blog.justwe.site/post/git-tag/</link>
      <pubDate>Mon, 13 Mar 2017 07:30:00 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/git-tag/</guid>
      <description>列出所有标签 1 git tag 添加标签(同时生成独立的版本库) 1 2 3 4 5 # 给当前commit打标签 git tag -a v0.0.1 -m &amp;#39;第一次添加标签&amp;#39; # 给指定的</description>
    </item>
    
    <item>
      <title>使用redis—geo api实现搜索附近的人，自己写的一个composer包</title>
      <link>https://blog.justwe.site/post/composer-redis-lbs/</link>
      <pubDate>Sat, 11 Mar 2017 12:11:00 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/composer-redis-lbs/</guid>
      <description>git地址 安装 需要使用composer，安装composer, composer中国镜像 如果是应用在项目当中的话找到根目录，需要和 compos</description>
    </item>
    
    <item>
      <title>LBS使用redis的解决方案--GEOHASH</title>
      <link>https://blog.justwe.site/post/redis-geohash-lbs/</link>
      <pubDate>Fri, 10 Mar 2017 10:53:00 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/redis-geohash-lbs/</guid>
      <description>最近需要用到LBS距离测绘方面的东西，用于搜索附近的人， 在网上搜了一下有一个比较通用的方案，就是采用 GEOHASH 算法 相关的参考资料 这套算法在 mongoDB 当中已经</description>
    </item>
    
    <item>
      <title>docker(3) 构建dockerfile</title>
      <link>https://blog.justwe.site/post/docker-dockerfile/</link>
      <pubDate>Wed, 08 Mar 2017 06:48:00 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/docker-dockerfile/</guid>
      <description>上一章我们用的是 docker commit 命令创建的自己的库，虽然简单但是定制性比较差，因此我们采用另一种且更广泛的做法就是 docker build命令，先上手做个demo 1</description>
    </item>
    
    <item>
      <title>go语言了解(1)</title>
      <link>https://blog.justwe.site/post/go-info/</link>
      <pubDate>Wed, 08 Mar 2017 06:42:24 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/go-info/</guid>
      <description>有人说go和php有很多相似的地方，用惯了弱语言的php是时候换换口味了 声明变量 go的声明变量的方式四种（茴香的茴有四种写法），开个玩笑，但</description>
    </item>
    
    <item>
      <title>go安装godoc</title>
      <link>https://blog.justwe.site/post/go-doc/</link>
      <pubDate>Tue, 07 Mar 2017 11:07:54 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/go-doc/</guid>
      <description>现在的版本(go version 1.8)下，go的开发工具已经都在git上上线了，可以直接安装 1 2 3 git clone https://github.com/golang/tools $GOPATH/src/golang.org/x/tools go build golang.org/x/tools 就能生成 godoc 的二进制包了，注意需要把第三方</description>
    </item>
    
    <item>
      <title>安装LiteIde配置</title>
      <link>https://blog.justwe.site/post/go-liteide/</link>
      <pubDate>Tue, 07 Mar 2017 05:49:56 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/go-liteide/</guid>
      <description>这里设置 Liteide 的配置(环境macOS) Liteide 是一款专门为go开发的一款ide，省去了类似atom编辑器的一些麻烦的环境配置导致atom越来越臃肿，是</description>
    </item>
    
    <item>
      <title>转 HTML5上传文件显示进度</title>
      <link>https://blog.justwe.site/post/html5-ajax-process/</link>
      <pubDate>Mon, 06 Mar 2017 03:02:00 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/html5-ajax-process/</guid>
      <description>使用ajax上传文件的时候为了通过 files api来获取文件信息，从而可以看到显示进度 html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 &amp;lt;div class=&amp;#34;row&amp;#34;&amp;gt; &amp;lt;label for=&amp;#34;file&amp;#34;&amp;gt; Upload Image:&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;file&amp;#34; name=&amp;#34;fileToUpload&amp;#34; id=&amp;#34;fileToUpload&amp;#34; multiple=&amp;#34;multiple&amp;#34; onchange=&amp;#34;fileSelected();&amp;#34; /&amp;gt;</description>
    </item>
    
    <item>
      <title>centos65安装docker遇到的坑</title>
      <link>https://blog.justwe.site/post/contentos-docker/</link>
      <pubDate>Wed, 01 Mar 2017 05:55:27 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/contentos-docker/</guid>
      <description>在国内的云服务商提供的镜像内核都是2.6.*的，不能满足docker需要的3.1.*，因此首先需要升级一下内核 1 2 3 4 5 6 7 8 #导入publ</description>
    </item>
    
    <item>
      <title>beforeAction的一个示例</title>
      <link>https://blog.justwe.site/post/yii-beforeaction/</link>
      <pubDate>Tue, 28 Feb 2017 07:42:34 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/yii-beforeaction/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 public function beforeAction($action) { if(condition){ Yii::$app-&amp;gt;response-&amp;gt;format = Response::FORMAT_JSON; Yii::$app-&amp;gt;response-&amp;gt;data = array( &amp;#39;status&amp;#39; =&amp;gt; -1, &amp;#39;message&amp;#39; =&amp;gt; &amp;#39;请先登录&amp;#39;, &amp;#39;url&amp;#39; =&amp;gt; \Yii::$app-&amp;gt;getHomeUrl() ); return false; } return true; } 这个函数只返回bool值，响应</description>
    </item>
    
    <item>
      <title>局部关闭csrf验证</title>
      <link>https://blog.justwe.site/post/yii-csrf/</link>
      <pubDate>Tue, 28 Feb 2017 07:40:44 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/yii-csrf/</guid>
      <description>简单理解 yii的 hehavior 就是代码实现了php54的 trait 特性 创建一个hehavior 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 &amp;lt;?php use Yii; use yii\base\ActionEvent; use yii\base\Behavior; use yii\web\Controller; class</description>
    </item>
    
    <item>
      <title>docker(2) 创建属于自己的库</title>
      <link>https://blog.justwe.site/post/docker-repo/</link>
      <pubDate>Sun, 19 Feb 2017 09:48:00 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/docker-repo/</guid>
      <description>上一章是了解了怎么创建一个容器，现在我们来把它做成我们自己的库，类似git那样的 首先查看下自己的库有哪些 1 2 3 4 5 ➜ ~ docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES</description>
    </item>
    
    <item>
      <title>docker(1)入门</title>
      <link>https://blog.justwe.site/post/docker-info/</link>
      <pubDate>Thu, 16 Feb 2017 15:46:00 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/docker-info/</guid>
      <description>开始 首先在docker官网或者国内的daoCloud来下载工具，不推荐新手在直接通过brew来安装 docker-machine 根据安装导航安装好就行 刚接触一个新玩具最</description>
    </item>
    
    <item>
      <title>composer的一个小毛病</title>
      <link>https://blog.justwe.site/post/composer-debug/</link>
      <pubDate>Mon, 13 Feb 2017 15:15:24 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/composer-debug/</guid>
      <description>当环境中同时安装xdebug和composer的时候，会产生一个报错 1 You are running composer with xdebug enabled. This has a major impact on runtime performance. See Https://getcomposer.org/xdebug 其实作为开发环境来说，并没有太大的影</description>
    </item>
    
    <item>
      <title>git推送远程失败</title>
      <link>https://blog.justwe.site/post/git-error/</link>
      <pubDate>Wed, 11 Jan 2017 06:41:43 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/git-error/</guid>
      <description>git push 的时候提示: 1 2 remote: Permission to ******/born.git denied to ******/. fatal: unable to access &amp;#39;https://github.com/ ******//born.git/&amp;#39;: The requested URL returned error: 403 是因为git的账号冲突，git误认为你使用的是另一个账号，解决办法也很简单 推送方式</description>
    </item>
    
    <item>
      <title>自己封装一个composer包玩玩</title>
      <link>https://blog.justwe.site/post/composer-package/</link>
      <pubDate>Wed, 11 Jan 2017 06:40:00 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/composer-package/</guid>
      <description>how to build a composer package 参考文档 首先是完善 composer.json 这个是composer需要抓去的的东西，相当于这个composer包的名片 实现步骤是 创建一个git库 （不用说</description>
    </item>
    
    <item>
      <title>git强制将远程版本覆盖本地</title>
      <link>https://blog.justwe.site/post/git-push-force/</link>
      <pubDate>Fri, 06 Jan 2017 06:18:22 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/git-push-force/</guid>
      <description>1 2 git fetch --all git reset --hard origin/master</description>
    </item>
    
    <item>
      <title>laravel服务容器延迟加载</title>
      <link>https://blog.justwe.site/post/laravel-lazy-load/</link>
      <pubDate>Mon, 26 Dec 2016 07:45:35 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/laravel-lazy-load/</guid>
      <description>laravel 注册的服务是可以延时加载的 很简单，在provider文件夹下指定的服务当中这样写 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29</description>
    </item>
    
    <item>
      <title>通过git rebase来合并commit提交记录</title>
      <link>https://blog.justwe.site/post/git-rebase/</link>
      <pubDate>Sun, 25 Dec 2016 15:43:00 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/git-rebase/</guid>
      <description>多人合作开发的时候就会因为本地的多个版本提交的很多杂乱的信息，导致git log查看的时候并不能很快的从一堆无意义的提交记录中找到我们想要的版</description>
    </item>
    
    <item>
      <title>再来个facade吧</title>
      <link>https://blog.justwe.site/post/laravel-facade/</link>
      <pubDate>Mon, 19 Dec 2016 15:48:00 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/laravel-facade/</guid>
      <description>参照上一篇的文章laravel 的 Repository 模式 都已经注册了服务也可以使用 Facade了 首先创建一个 Facade文件，还是在 app/Repositor</description>
    </item>
    
    <item>
      <title>windows构建node,npm,gulp工具(测试可用)</title>
      <link>https://blog.justwe.site/post/win-node-npm/</link>
      <pubDate>Tue, 13 Dec 2016 10:04:00 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/win-node-npm/</guid>
      <description>windows 安装 node 其实很简单 原文地址 第一步 到官网下载页下载nodejs，并默认安装，安装成功后打开cmd， 运行node -v即可查看当前node.js版</description>
    </item>
    
    <item>
      <title>swoole构建聊天室demo</title>
      <link>https://blog.justwe.site/post/websocket-demo/</link>
      <pubDate>Sat, 10 Dec 2016 11:40:00 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/websocket-demo/</guid>
      <description>websocket文档 原文出处 后端代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 //websocket.php &amp;lt;?php $server = new swoole_websocket_server(&amp;#34;0.0.0.0&amp;#34;, 9501); $server-&amp;gt;on(&amp;#39;open&amp;#39;, function (swoole_websocket_server $server, $request) { file_put_contents( __DIR__ .&amp;#39;/log.txt&amp;#39; , $request-&amp;gt;fd); }); $server-&amp;gt;on(&amp;#39;message&amp;#39;, function (swoole_websocket_server $server, $frame) { global</description>
    </item>
    
    <item>
      <title>安装swoole的记录</title>
      <link>https://blog.justwe.site/post/php-swoole/</link>
      <pubDate>Sat, 10 Dec 2016 05:43:14 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/php-swoole/</guid>
      <description>源码地址 因为swoole已经加入官方扩展包中，可以直接用pecl安装 1 pecl install swoole 也可以通过源码安装： 首先确认php的安装路径 1 which php 这个大部分都是</description>
    </item>
    
    <item>
      <title>centos上安装git2.2</title>
      <link>https://blog.justwe.site/post/centos-install-git/</link>
      <pubDate>Sat, 03 Dec 2016 14:24:00 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/centos-install-git/</guid>
      <description>centos自带的git版本太低了,安装个新吧 安装依赖环境 1 2 3 4 5 6 7 &amp;gt;# yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel asciidoc &amp;gt;# yum install gcc perl-ExtUtils-MakeMaker error: ```/utf8.c:463: undefined reference to `libiconv&amp;#39;``` &amp;gt;# wget http://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.14.tar.gz &amp;gt;# tar zxvf libiconv-1.14.tar.gz &amp;gt;# cd libiconv-1.14 &amp;gt;# ./configure --prefix=/usr/local/libiconv &amp;gt;#</description>
    </item>
    
    <item>
      <title>git删除已提交入库的文件</title>
      <link>https://blog.justwe.site/post/git-rm-cache/</link>
      <pubDate>Tue, 29 Nov 2016 03:07:45 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/git-rm-cache/</guid>
      <description>将git已经提交的文件移除出库（针对的就是 .idea 和 .DS_Store） 1 2 3 4 5 6 7 8 git rm -r --cache .idea/ git rm --cache .DS_Store 在 .gitignore 文件中添加相应禁止的东西 git commit -m &amp;#39;we didnt want</description>
    </item>
    
    <item>
      <title>git更换远程地址</title>
      <link>https://blog.justwe.site/post/git-remote/</link>
      <pubDate>Tue, 29 Nov 2016 03:06:00 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/git-remote/</guid>
      <description>关键就是移除本地的远程连接路径，替换成我们需要传到的路径 将本地库的远程地址更改 1 git remote set-url origin nideyuanchengdizhi 接下来正常推送就好</description>
    </item>
    
    <item>
      <title>git本地建库推送远程</title>
      <link>https://blog.justwe.site/post/git-push/</link>
      <pubDate>Tue, 29 Nov 2016 03:04:00 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/git-push/</guid>
      <description>本地新建库和多远程库的操作 新建本地库 1 2 3 4 5 6 7 8 9 10 11 12 13 #初始化 git init git add -A git commit -m &amp;#39;init it&amp;#39; #删除本地远程连接 git remote rm origin git remote add origin https://git.oschina.net/gaofeifps/laravel53.git #自动合并远程</description>
    </item>
    
    <item>
      <title>mysql5.7版本初始化设置</title>
      <link>https://blog.justwe.site/post/mysql57-config/</link>
      <pubDate>Tue, 15 Nov 2016 09:45:06 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/mysql57-config/</guid>
      <description>5.7版本有了一些新的变动，首先就是密码部分和之前有了较大的区别。它对数据的安全性方面做了较大的提升。其次的是数据对json的支持，数据库添</description>
    </item>
    
    <item>
      <title>lumen5.3正常使用dd()函数</title>
      <link>https://blog.justwe.site/post/lumen-dd/</link>
      <pubDate>Tue, 15 Nov 2016 06:58:00 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/lumen-dd/</guid>
      <description>主用laravel的已经习惯了dd函数的方便， 但是放到lumen5.3的时候就变成了悲催的var_dump,查看了下源码 1 2 3 4 5 6 7 8 9 10</description>
    </item>
    
    <item>
      <title>七牛云javascriptSDK的demo</title>
      <link>https://blog.justwe.site/post/qiniujs-demo/</link>
      <pubDate>Sat, 12 Nov 2016 04:28:00 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/qiniujs-demo/</guid>
      <description>使用oss的话碰到用户上传的场景建议优先使用的js上传到oss，不需要经过服务端，也算减轻了服务器的压力，缺点就是有的sdk不支持文件类型的</description>
    </item>
    
    <item>
      <title>小程序(2)</title>
      <link>https://blog.justwe.site/post/wxcx-2/</link>
      <pubDate>Mon, 07 Nov 2016 15:55:22 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/wxcx-2/</guid>
      <description>由上篇博客可以了解小程序运行的一个大体过程,首先app.json进行配置路由和基本的样式调整,其次可以在对应的路由指向的目录下添加 .wxml .wxss .js 这三</description>
    </item>
    
    <item>
      <title>多维数组排序</title>
      <link>https://blog.justwe.site/post/php-array-1/</link>
      <pubDate>Thu, 03 Nov 2016 09:32:00 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/php-array-1/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 $testArr = [ [&amp;#39;id&amp;#39;=&amp;gt;1,&amp;#39;msg&amp;#39;=&amp;gt;&amp;#39;aaa&amp;#39;], [&amp;#39;id&amp;#39;=&amp;gt;2,&amp;#39;msg&amp;#39;=&amp;gt;&amp;#39;bbb&amp;#39;], [&amp;#39;id&amp;#39;=&amp;gt;3,&amp;#39;msg&amp;#39;=&amp;gt;&amp;#39;ccc&amp;#39;], [&amp;#39;id&amp;#39;=&amp;gt;4,&amp;#39;msg&amp;#39;=&amp;gt;&amp;#39;ddd&amp;#39;], ]; $roler = [2,1,3,4]; usort($testArr,function($a,$b) use($roler){ return (array_search($a[&amp;#39;id&amp;#39;], $roler) &amp;lt; array_search($b[&amp;#39;id&amp;#39;], $roler)) ? -1 : 1; }); var_dump($testArr); die(); 输出结果：反正成功了 还有就是 第一层要是索引数组</description>
    </item>
    
    <item>
      <title>git本地拉取远程分支</title>
      <link>https://blog.justwe.site/post/git-pull/</link>
      <pubDate>Fri, 28 Oct 2016 11:44:00 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/git-pull/</guid>
      <description>首先git clone一个git库， 其次在本地新建一个分支 1 git checkout -b devlocal 然后设置本地git文件，将本地分支和远程分支关联起来 （我有个远程分支叫做d</description>
    </item>
    
    <item>
      <title>yii2路由重写方案</title>
      <link>https://blog.justwe.site/post/yii-rewrite/</link>
      <pubDate>Thu, 27 Oct 2016 15:49:00 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/yii-rewrite/</guid>
      <description>yii2 关于 apache 和 nginx 的路由重写配置 apache路由重写 1 2 3 4 5 6 7 8 9 10 Options +FollowSymLinks IndexIgnore */* RewriteEngine on # if a directory or a file exists, use it directly RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d # otherwise forward it to index.php RewriteRule . index.php 从yiic</description>
    </item>
    
    <item>
      <title>小程序初次接触(1)</title>
      <link>https://blog.justwe.site/post/wxcx/</link>
      <pubDate>Mon, 24 Oct 2016 15:28:00 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/wxcx/</guid>
      <description>刚开始接触vue.js没多久就收到小程序内侧的信息,看了看文档两者关联性很强,于是就两者一块学了 首先安装小程序的开发工具,虽然我们没有邀请i</description>
    </item>
    
    <item>
      <title>larvel ORM模型中的一些方法和变量的作用</title>
      <link>https://blog.justwe.site/post/laravel-orm/</link>
      <pubDate>Fri, 21 Oct 2016 12:02:00 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/laravel-orm/</guid>
      <description>用代码说话 相关命令： 创建迁移文件 php artisan make:migration Pate_table 进行迁移 php artisan migrate 创建模型文件 php artisan make:model Page 把如下文件内容复制到对应的文件下，就可以按照注释进行测试了。控制器</description>
    </item>
    
    <item>
      <title>webuploader插件</title>
      <link>https://blog.justwe.site/post/webupload-demo/</link>
      <pubDate>Wed, 12 Oct 2016 15:24:00 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/webupload-demo/</guid>
      <description>通过这个插件让我感觉到大百度还仍然是技术公司 说了句废话,开始正题. 这里用的是插件提供的源码 插件官网传送门 demo就是拿的源码的 image-upload 示例,就是把</description>
    </item>
    
    <item>
      <title>js获取地址信息</title>
      <link>https://blog.justwe.site/post/js-href/</link>
      <pubDate>Mon, 10 Oct 2016 13:43:44 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/js-href/</guid>
      <description>js获取api的一系列API接口 1 2 3 4 5 window.location.host document.domain(vue下会发生错误) //全地址 window.location.href 补充: 获取当前域名信息 代码如下 1</description>
    </item>
    
    <item>
      <title>laravel的定时任务</title>
      <link>https://blog.justwe.site/post/laravel-cron/</link>
      <pubDate>Sun, 09 Oct 2016 15:22:00 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/laravel-cron/</guid>
      <description>了解下 laravel 定时任务是怎么使用的 首先在linux上创建一个crontab命令. crontab -e 第一次用的时候会选择编辑器,默认nano 然后在crontab文</description>
    </item>
    
    <item>
      <title>laravel的报错处理</title>
      <link>https://blog.justwe.site/post/laravel-error/</link>
      <pubDate>Sun, 09 Oct 2016 15:10:00 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/laravel-error/</guid>
      <description>有很多时候我们需要有404 500 这类的错误页面,在逻辑层里写这些又有些太繁琐,干脆从上游去搞一下 在 app/exceptions/handler.</description>
    </item>
    
    <item>
      <title>vue的初识</title>
      <link>https://blog.justwe.site/post/vue-1/</link>
      <pubDate>Sun, 09 Oct 2016 15:02:46 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/vue-1/</guid>
      <description>照着下面的代码打一遍体会一下vue的优雅 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 &amp;lt;div class=&amp;#34;mytest&amp;#34;&amp;gt; {{--直接调取js中定义好的值--}</description>
    </item>
    
    <item>
      <title>laravel5.1使用stmp邮箱服务</title>
      <link>https://blog.justwe.site/post/laravel-stmp/</link>
      <pubDate>Sun, 09 Oct 2016 14:51:00 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/laravel-stmp/</guid>
      <description>这里主要使用的qq邮箱来举例 流程:登录qq邮箱-&amp;gt;进入账户设置-&amp;gt;开通stmp服务 laravel配置 .env文件当中： 1 2 3 4 5</description>
    </item>
    
    <item>
      <title>唉~被ie坑了一次又一次</title>
      <link>https://blog.justwe.site/post/fuck-ie/</link>
      <pubDate>Sat, 08 Oct 2016 14:39:00 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/fuck-ie/</guid>
      <description>最近的网站项目当中用上了vue,结果ie低版本的不支持es5的写法,导致各种报错,而且一些很实用的api也不能用了..还有webGL的支持也</description>
    </item>
    
    <item>
      <title>hello world</title>
      <link>https://blog.justwe.site/post/hello-world-2/</link>
      <pubDate>Fri, 07 Oct 2016 11:37:00 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/hello-world-2/</guid>
      <description>接触编程输出的第一句话就是hello world,这是信仰; 终于决定整个博客写点东西了,这里的主要用处就是发牢骚和记录点日常收获;向着大牛匍匐</description>
    </item>
    
    <item>
      <title>laravel-session</title>
      <link>https://blog.justwe.site/post/laravel-session/</link>
      <pubDate>Wed, 01 Jun 2016 20:56:16 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/laravel-session/</guid>
      <description>前置条件 首先需要有redis的支持 session_driver=database 的另说 1 composer require predis/predis 1.0.* 文件配置 在.env 文件下的app_key 1 2 3 4 APP_KEY=Lajq5EFWYq1COgmgltYM5TlSfRaTxLq1 CACHE_DRIVER=redis SESSION_DRIVER=redis config/database.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 &amp;#39;redis&amp;#39; =&amp;gt;</description>
    </item>
    
    <item>
      <title>laravel-repository</title>
      <link>https://blog.justwe.site/post/laravel-repository/</link>
      <pubDate>Fri, 01 Apr 2016 20:53:01 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/laravel-repository/</guid>
      <description>laravel版本5.1+ 首先创建测试文件 1 php artisan make:controller TestController 修改路由文件route.php或者routes/web.php 1 Route::get(&amp;#39;test&amp;#39;, &amp;#39;TestController@index&amp;#39;); 创建服务提供者文件,</description>
    </item>
    
  </channel>
</rss>
