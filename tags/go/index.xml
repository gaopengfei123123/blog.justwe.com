<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on Even - A super concise theme for Hugo</title>
    <link>http://blog.justwe.site/tags/go/</link>
    <description>Recent content in go on Even - A super concise theme for Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 14 Nov 2019 11:29:20 +0000</lastBuildDate>
    
	<atom:link href="http://blog.justwe.site/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>转 go 模仿Unix 管道操作</title>
      <link>http://blog.justwe.site/post/go-pipe-pattern/</link>
      <pubDate>Thu, 14 Nov 2019 11:29:20 +0000</pubDate>
      
      <guid>http://blog.justwe.site/post/go-pipe-pattern/</guid>
      <description>本文摘录了许式伟 《Go，基于连接与组合的语言》部分内容，为了便于理解，我在其后端写了个完整的示例程序帮助理解，这篇文章 一是展示go在并行编程</description>
    </item>
    
    <item>
      <title>转 golang http平滑重启实现</title>
      <link>http://blog.justwe.site/post/go-http-grace-restart/</link>
      <pubDate>Mon, 04 Nov 2019 17:11:54 +0000</pubDate>
      
      <guid>http://blog.justwe.site/post/go-http-grace-restart/</guid>
      <description>服务端代码经常需要升级，对于线上系统的升级常用的做法是，通过前端的负载均衡（如nginx）来保证升级时至少有一个服务可用，依次（灰度）升级。</description>
    </item>
    
    <item>
      <title>golang 通过 context 控制并发的应用场景</title>
      <link>http://blog.justwe.site/post/go-context/</link>
      <pubDate>Fri, 25 Oct 2019 14:13:43 +0000</pubDate>
      
      <guid>http://blog.justwe.site/post/go-context/</guid>
      <description>golang 里出现多 goroutine 的场景很常见, 最常用的两种方式就是 WaitGroup 和 Context, 今天我们了解一下 Context 的应用场景 使用场景 场景一: 多goroutine执行超时通知 并发执行的业</description>
    </item>
    
    <item>
      <title>转 Golang 需要避免踩的 50 个坑</title>
      <link>http://blog.justwe.site/post/go-50-tips/</link>
      <pubDate>Thu, 31 Jan 2019 10:18:33 +0000</pubDate>
      
      <guid>http://blog.justwe.site/post/go-50-tips/</guid>
      <description>Golang 需要避免踩的 50 个坑</description>
    </item>
    
    <item>
      <title>用gorilla websocket 搞一个聊天室</title>
      <link>http://blog.justwe.site/post/go-chat/</link>
      <pubDate>Tue, 15 Jan 2019 11:27:36 +0000</pubDate>
      
      <guid>http://blog.justwe.site/post/go-chat/</guid>
      <description>这个demo实现了: 1. 消息广播 2. 心跳检测 提供了一个通过命令行来进行聊天的例子 具体逻辑都在 websocket.go 这个文件里 这里的核心就是 aliveList 这个全局变量, 负责把消息</description>
    </item>
    
    <item>
      <title>go mysql数据库连接池的使用</title>
      <link>http://blog.justwe.site/post/go-mysql-pool/</link>
      <pubDate>Mon, 17 Dec 2018 14:48:26 +0000</pubDate>
      
      <guid>http://blog.justwe.site/post/go-mysql-pool/</guid>
      <description>建立一个mysql连接池将极大的缩短应用的响应时间, 减少频繁的io开销以及gc, 这在golang里面也是很容易就实现的 示例代码: 1 2 3 4 5 6</description>
    </item>
    
    <item>
      <title>go里的点点点语法</title>
      <link>http://blog.justwe.site/post/go-dotdotdot/</link>
      <pubDate>Fri, 14 Dec 2018 10:37:32 +0000</pubDate>
      
      <guid>http://blog.justwe.site/post/go-dotdotdot/</guid>
      <description>golang 代码里面有时会出现 ... 这个操作, 初次看到也是摸不到头脑, 其实他是用来做数组的析构用的 举个例子就明白了: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19</description>
    </item>
    
    <item>
      <title>通过channel控制并发数量</title>
      <link>http://blog.justwe.site/post/go-channel-waitgroup/</link>
      <pubDate>Tue, 04 Dec 2018 14:14:30 +0000</pubDate>
      
      <guid>http://blog.justwe.site/post/go-channel-waitgroup/</guid>
      <description>使用 go 关键字有时候需要控制一下并发的数量, 但不至于去修改 runtime.GOMAXPROCS 这个数值, 这里就用到了缓冲channel的特性 demo: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17</description>
    </item>
    
    <item>
      <title>nginx转发到go服务当中</title>
      <link>http://blog.justwe.site/post/go-nginx-docker/</link>
      <pubDate>Sun, 25 Nov 2018 15:39:36 +0000</pubDate>
      
      <guid>http://blog.justwe.site/post/go-nginx-docker/</guid>
      <description>通过docker-compose编排的容器总是有一些奇怪的问题 问题核心就是go-server和nginx所属不同的容器, 需要外界能访问到go</description>
    </item>
    
    <item>
      <title>go 火焰图分析</title>
      <link>http://blog.justwe.site/post/go-flame-graph/</link>
      <pubDate>Thu, 01 Nov 2018 17:03:33 +0000</pubDate>
      
      <guid>http://blog.justwe.site/post/go-flame-graph/</guid>
      <description>go version go1.11.1 darwin/amd64 安装: 1 2 3 $ go get github.com/uber/go-torch $ cd $GOPATH/src/github.com/uber/go-torch $ git clone https://github.com/brendangregg/FlameGraph.git 安装测试工具 1 2 3 $ go get github.com/Masterminds/glide $ cd $GOPATH/src/github.com/uber/go-torch $ glide install 性能分析工具 glide install如果出现 Update failed for golang.org/x/sys: Cannot detect VCS 这种报错,</description>
    </item>
    
    <item>
      <title>golang 处理 map[interface{}]interface{} 数据</title>
      <link>http://blog.justwe.site/post/go-complex-interface/</link>
      <pubDate>Fri, 28 Sep 2018 16:58:31 +0000</pubDate>
      
      <guid>http://blog.justwe.site/post/go-complex-interface/</guid>
      <description>go 调用 rpc , 掉用其他的服务时会出现一些神奇的数据结构, 今天我们来实验一个 上代码: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31</description>
    </item>
    
    <item>
      <title>go 开发时的一些初级问题</title>
      <link>http://blog.justwe.site/post/go-primary-mistakes/</link>
      <pubDate>Tue, 25 Sep 2018 10:57:02 +0000</pubDate>
      
      <guid>http://blog.justwe.site/post/go-primary-mistakes/</guid>
      <description>平时碰到的一些小问题, 记一下 assignment to entry in nil map, map 赋值问题 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 // ServiceMap</description>
    </item>
    
    <item>
      <title>golang 的测试文件</title>
      <link>http://blog.justwe.site/post/go-test/</link>
      <pubDate>Thu, 20 Sep 2018 10:45:51 +0000</pubDate>
      
      <guid>http://blog.justwe.site/post/go-test/</guid>
      <description>一些函数没有连续的会话状态是可以写出来顺便就写一个测试脚本了 比如: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37</description>
    </item>
    
    <item>
      <title>go interface 的机制</title>
      <link>http://blog.justwe.site/post/go-interface-tip/</link>
      <pubDate>Wed, 12 Sep 2018 14:53:03 +0000</pubDate>
      
      <guid>http://blog.justwe.site/post/go-interface-tip/</guid>
      <description>对 interface 赋值变量的时候经常出的问题 日常开发时有个这样的例子: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 package main import &amp;#34;fmt&amp;#34; type Human interface { Run() } type Boy struct { Name string } func (b</description>
    </item>
    
    <item>
      <title>身为 phper 为什么我选择 go 语言?</title>
      <link>http://blog.justwe.site/post/go-why/</link>
      <pubDate>Wed, 12 Sep 2018 14:45:50 +0000</pubDate>
      
      <guid>http://blog.justwe.site/post/go-why/</guid>
      <description>想换个语言开发的同学可以看这里 概况 go 相比 php 有哪些优势? go 的部署简单, 运行时只要把一个二进制文件扔到机器上就行, 这一点在容器化方面优势很大 可控</description>
    </item>
    
    <item>
      <title>基于rabbitmq实现的延时队列(golang版)</title>
      <link>http://blog.justwe.site/post/go-rabbitmq-delay-queue/</link>
      <pubDate>Mon, 14 May 2018 21:37:40 +0000</pubDate>
      
      <guid>http://blog.justwe.site/post/go-rabbitmq-delay-queue/</guid>
      <description>虽然 rabbitmq 没有延时队列的功能,但是稍微变动一下也是可以实现的 实现延时队列的基本要素 存在一个倒计时机制:Time To Live(TTL) 当到达时间点的时候会触发一个发</description>
    </item>
    
    <item>
      <title>使用 go 进行 jwt 验证</title>
      <link>http://blog.justwe.site/post/go-jwt/</link>
      <pubDate>Mon, 22 Jan 2018 14:04:26 +0000</pubDate>
      
      <guid>http://blog.justwe.site/post/go-jwt/</guid>
      <description>对于使用负载均衡的服务器来说,使用 JWT(JSON WEB TOKEN) 是一个更优的选择,session受到单台服务器的限制,一个用户登录过后就只能分配到 这一台服务器上,这</description>
    </item>
    
    <item>
      <title>关于跨域请求的二三事</title>
      <link>http://blog.justwe.site/post/http-cross-domain-etc/</link>
      <pubDate>Tue, 16 Jan 2018 17:29:54 +0000</pubDate>
      
      <guid>http://blog.justwe.site/post/http-cross-domain-etc/</guid>
      <description>在前后端分离开发时跨域经常是一个不可回避的问题,这里介绍一个比较简单的办法,前端 vue.js,后端 go 首先要区分简单请求和复杂请求 这里阮一峰</description>
    </item>
    
    <item>
      <title>树莓派上安装 golang</title>
      <link>http://blog.justwe.site/post/raspberry-pi3-golang-env/</link>
      <pubDate>Wed, 22 Nov 2017 10:30:03 +0000</pubDate>
      
      <guid>http://blog.justwe.site/post/raspberry-pi3-golang-env/</guid>
      <description>树莓派上需要进行编译安装,不过很简单,而且 golang 官方也有 arm 平台的编译包, 在树莓派上一定要选linux-armv61这个版本啊 &amp;gt; golang 各版本的下载列表</description>
    </item>
    
    <item>
      <title>go操作 json 文本</title>
      <link>http://blog.justwe.site/post/go-json/</link>
      <pubDate>Mon, 05 Jun 2017 22:18:51 +0000</pubDate>
      
      <guid>http://blog.justwe.site/post/go-json/</guid>
      <description>一些简单的导入导出 事先准备一个 json 文件 首先我们准备一个 json 文件,我直接就用的package.json里的一些字段 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16</description>
    </item>
    
    <item>
      <title>go-mysql</title>
      <link>http://blog.justwe.site/post/go-mysql/</link>
      <pubDate>Wed, 17 May 2017 23:32:12 +0000</pubDate>
      
      <guid>http://blog.justwe.site/post/go-mysql/</guid>
      <description>这里写一个go 操作 mysql 的 curd 的 demo 表结构是这样的 1 2 3 4 5 6 create table test( id int primary key auto_increment, name varchar(20) default &amp;#39;&amp;#39;, age int default 0, created_at int default 0 ) go 的文件是: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16</description>
    </item>
    
    <item>
      <title>go-http</title>
      <link>http://blog.justwe.site/post/go-http/</link>
      <pubDate>Wed, 26 Apr 2017 23:11:29 +0000</pubDate>
      
      <guid>http://blog.justwe.site/post/go-http/</guid>
      <description>用于了解 http 包的一些运行机制 首先一个简单的例子 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;strings&amp;#34; &amp;#34;log&amp;#34; ) func sayhelloName(w http.ResponseWriter, r *http.Request) { r.ParseForm() //</description>
    </item>
    
    <item>
      <title>go-comma-switch</title>
      <link>http://blog.justwe.site/post/go-comma-switch/</link>
      <pubDate>Mon, 24 Apr 2017 22:52:37 +0000</pubDate>
      
      <guid>http://blog.justwe.site/post/go-comma-switch/</guid>
      <description>简单介绍下 comma-ok 和 switch 用来判定变量类型 上篇博客介绍了接口,接口在实际应用中可以当做一个万用变量来用,可以用一个空接口来存储多种类型的变量 但是,当我</description>
    </item>
    
    <item>
      <title>go-interface</title>
      <link>http://blog.justwe.site/post/go-interface/</link>
      <pubDate>Wed, 19 Apr 2017 23:43:41 +0000</pubDate>
      
      <guid>http://blog.justwe.site/post/go-interface/</guid>
      <description>关于 go 语言接口的简单介绍 接口对于 go 实现面向对象来说非常重要,如果没有它 go 的结构体(struct)也就只能存储一些信息, 但是相关的方法将会变得</description>
    </item>
    
    <item>
      <title>go-simple-webserver-demo</title>
      <link>http://blog.justwe.site/post/go-simple-webserver-demo/</link>
      <pubDate>Tue, 18 Apr 2017 23:25:04 +0000</pubDate>
      
      <guid>http://blog.justwe.site/post/go-simple-webserver-demo/</guid>
      <description>用 go 写的一个简单的 http 服务 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;strings&amp;#34; &amp;#34;log&amp;#34; ) func sayhelloName(w http.ResponseWriter, r *http.Request) { r.ParseForm() //解析参数,默认不解析</description>
    </item>
    
  </channel>
</rss>