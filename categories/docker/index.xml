<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>docker on helloword啊</title>
    <link>https://blog.justwe.site/categories/docker/</link>
    <description>Recent content in docker on helloword啊</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&lt;a rel=&#39;icp&#39; href=&#39;http://www.beian.miit.gov.cn&#39; target=&#39;_blank&#39;&gt;justwe.site 版权所有 ICP证:京ICP备16053557号-2&lt;/a&gt;</copyright>
    <lastBuildDate>Tue, 10 Mar 2020 15:03:50 +0800</lastBuildDate>
    
	<atom:link href="https://blog.justwe.site/categories/docker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Docker 搭建 Zookeeper 测试集群</title>
      <link>https://blog.justwe.site/post/docker-zookeeper/</link>
      <pubDate>Tue, 10 Mar 2020 15:03:50 +0800</pubDate>
      
      <guid>https://blog.justwe.site/post/docker-zookeeper/</guid>
      <description>&lt;p&gt;使用 docker-compose 在本地搭建一个测试用的zookeeper集群, 顺便带个web页面方便查看&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>通过 docker-compose 搭建一个 elk</title>
      <link>https://blog.justwe.site/post/docker-elk/</link>
      <pubDate>Mon, 20 Aug 2018 14:57:47 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/docker-elk/</guid>
      <description>找了不少使用 docker-elk 搭建的博客, 英文的阅读吃力不说, 镜像源也是慢的让人头皮发麻, 因此重新编排了一个docker-compose,源都是从 https://hub.docker.com/ 上找的,</description>
    </item>
    
    <item>
      <title>在 centOS65 环境下安装 docker</title>
      <link>https://blog.justwe.site/post/docker-install-centos65/</link>
      <pubDate>Fri, 06 Jul 2018 10:36:50 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/docker-install-centos65/</guid>
      <description>早期的 docker 对稍微老点的系统支持都不是很友好, 也是因为操作系统的一些新特性才能让 docker 运行起来 在国内的云服务商提供的 CentOS65 镜像内核都是2.6.*的，不能</description>
    </item>
    
    <item>
      <title>docker中 arg 和 env 的区别</title>
      <link>https://blog.justwe.site/post/docker-arg-env/</link>
      <pubDate>Thu, 28 Jun 2018 17:55:59 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/docker-arg-env/</guid>
      <description>在使用 docker-compoe 构建镜像的时候会感觉 ARG 和 ENV 的作用很相似, 但是这两个存在就肯定有它的原因 它们起作用的时机 arg 是在 build 的时候存在的, 可以在 Dockerfile 中当做变量来使用</description>
    </item>
    
    <item>
      <title>docker-volume</title>
      <link>https://blog.justwe.site/post/docker-volume/</link>
      <pubDate>Tue, 13 Feb 2018 13:24:30 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/docker-volume/</guid>
      <description>这里有一个使用 wordpress 的 docker-compose.yml的示例: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 version:&amp;#39;3&amp;#39;services:db:image:mysql:5.7volumes:- db_data:/var/lib/mysqlrestart:alwaysenvironment:MYSQL_ROOT_PASSWORD:gaofeifiyMYSQL_DATABASE:wordpressMYSQL_USER:wordpressMYSQL_PASSWORD:wordpressports:- 33060:3306wordpress:depends_on:- dbimage:wordpress:latestports:- &amp;#34;8080:80&amp;#34;restart:alwaysenvironment:WORDPRESS_DB_HOST:db:3306WORDPRESS_DB_USER:wordpressWORDPRESS_DB_PASSWORD:wordpressvolumes:db_data: 其中有一点</description>
    </item>
    
    <item>
      <title>docker-compose.yml 常用命令</title>
      <link>https://blog.justwe.site/post/docker-compose-yml/</link>
      <pubDate>Mon, 12 Feb 2018 10:36:50 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/docker-compose-yml/</guid>
      <description>常用命令备注 build 构建(重构)服务容器 格式为: docker-compose build [options] [service...] --force-rm 删除构建时的临时容器 --no-cache 构建不使用 cache --pull 始终尝试 pull 最新的镜像 up (这个才是最常用的) docker-compose up [options] [service...] 直</description>
    </item>
    
    <item>
      <title>docker-composer-install</title>
      <link>https://blog.justwe.site/post/docker-composer-install/</link>
      <pubDate>Mon, 10 Apr 2017 22:14:01 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/docker-composer-install/</guid>
      <description>安装 docker-composer 1 2 3 curl -L https://github.com/docker/compose/releases/download/1.1.0/docker-compose-`uname -s`-`uname -m` &amp;gt; /usr/local/bin/docker-compose chmod +x /usr/local/bin/docker-compose 可能会有被墙的情况,可以找一下国内的云服务商,比如 DaoCloud</description>
    </item>
    
    <item>
      <title>docker(3) 构建dockerfile</title>
      <link>https://blog.justwe.site/post/docker-dockerfile/</link>
      <pubDate>Wed, 08 Mar 2017 06:48:00 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/docker-dockerfile/</guid>
      <description>上一章我们用的是 docker commit 命令创建的自己的库，虽然简单但是定制性比较差，因此我们采用另一种且更广泛的做法就是 docker build命令，先上手做个demo 1</description>
    </item>
    
    <item>
      <title>docker(2) 创建属于自己的库</title>
      <link>https://blog.justwe.site/post/docker-repo/</link>
      <pubDate>Sun, 19 Feb 2017 09:48:00 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/docker-repo/</guid>
      <description>上一章是了解了怎么创建一个容器，现在我们来把它做成我们自己的库，类似git那样的 首先查看下自己的库有哪些 1 2 3 4 5 6 ➜ ~ docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS</description>
    </item>
    
    <item>
      <title>docker(1)入门</title>
      <link>https://blog.justwe.site/post/docker-info/</link>
      <pubDate>Thu, 16 Feb 2017 15:46:00 +0000</pubDate>
      
      <guid>https://blog.justwe.site/post/docker-info/</guid>
      <description>开始 首先在docker官网或者国内的daoCloud来下载工具，不推荐新手在直接通过brew来安装 docker-machine 根据安装导航安装好就行 刚接触一个新玩具最</description>
    </item>
    
  </channel>
</rss>